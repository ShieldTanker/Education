
센서 구현

콘 형태의 시야 센서, 구 형태의 센서

콘 형태의 시야 : 간단하고 효율적이지만 제한적인 RayCast 방식을 보완
               2D 나 3D 모두 사용가능, 간단한 겹침 검사로부터 현실적인 모델까지 다향함
			   
구 형태의 센서(소리, 냄새, 느끼기) :

////////////////////////////////////////////////////////////////////////////////////

TankModel Asset 다운 및 임포트( Import )

씬 이름 Sensor 로 변경

3D 오브젝트 Plane 생성, 이름 Floor 로 변경 및 Material 폴더 생성후 마테리얼 생성
Floor 에 색상 적용

Models 에 있는 Tank 프리팹 을 오브젝트로 생성 , Enemy 로 변경

태그 Enemy 생성 후 적용

Rigidbody 추가 중력 끄기,키네메틱 켜기
Box Collider 추가  크기 조정

//////////////////////////////////////////////////////////////////////////////////////////

3D 오브젝트 큐브 추가, 이름 Obstacle
위치값 10, 2, 0
스케일 ,4 4, 20

마테리얼 만들고 색상 적용

///////////////////////////////////////////////////////////////////////////////////////////////////////////

센서 넣을 오브젝트

Enemy 오브젝트 복제 후 이름 AI Character 로 변경
태그 플레이어로 설정

마테리얼 생성 후 AI Character 오브젝트에 적용
( 씬뷰의 모델링에 끌어다 놓으면 그부위만 색상 변경 가능 )

//////////////////////////////////////////////////////////////////////////////////////////

카메라 탑뷰 처럼 보이게 
위치값 0 90 0
회전값 90 0 0

그림자 적게 하기위해 빛의 방향 조정
위치값 60 0 0
회전값 90 0 0

빈브젝트 생성 후 Floor 와 Obstacle 넣기, Navigation Static 활성화

Window > AI > Navigation > Bake 탭 
> Agent Radius 1.5
  Step Height 0.8 

> Bake  


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

빈오브젝트 생성후 Target 으로 변경

자식오브젝트로 Sphere 생성 스케일 값 3, 3, 3, 마테리얼 생성 후 적용

Target 오브젝트에 Target 스크립트 생성

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
// 네비게이션 사용 위해 넣기
using UnityEngine.AI;

public class Target : MonoBehaviour
{
    NavMeshAgent navAgent;

    private void Start()
    {
	    // NavMeshAgent 타입의 오브젝트 의 정보를 변수에 저장
        navAgent = FindObjectOfType<NavMeshAgent>();
    }

    void Update()
    {
        if (Input.GetMouseButtonDown(0))
        {
            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
            RaycastHit hitInfo;

            if (Physics.Raycast(ray.origin, ray.direction, out hitInfo))
            {
                Vector3 targetPosition = hitInfo.point;
                transform.position = targetPosition;

                // 에이전트의 목적지는 = targetPosition;
                navAgent.destination = targetPosition;
            }
        }
    }
}


//////////////////////////////////////////////////////////////////////////////////////////////////////

Enemy 오브젝트에 Nav Mesh Agent 컴포넌트 생성
Base Offset : 0
Speed       : 0
Height      : 1


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

프로젝트뷰에 새 스크립트 Aspect 생성

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Aspect : MonoBehaviour
{
    // 태그처럼 카테고리 만들기
    public enum AspectName
    {
        Player,
        Enemy
    }

    public AspectName aspectName;
}

Enemy 와 AI Character 에 넣기

Enemy 에 Enemy 로 설정
AI Character 에 Player 로 설정

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

정찰 구현

AI Character 오브젝트에 Wonder 스크립트 생성

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Wonder : MonoBehaviour
{
    // 목적지
    Vector3 tarPos;

    float minX = -45f;
    float maxX = 45f;
    
    float minZ = -45f;
    float maxZ = 45f;

    float rotSpeed = 2f;
    float movementSpeed = 5f;

    private void Start()
    {
        GetNextPosition();
    }

    private void Update()
    {
        // 타겟의 위치와 오브젝트의 거리 차이가 5 이하이면 도착했다고 판정
        if (Vector3.Distance(tarPos, transform.position) <= 5f)
        {
            // 다음 목적지 설정
            GetNextPosition();
        }

        // 부드럽게 회전 시키기
        Quaternion tarRot = Quaternion.LookRotation(tarPos - transform.position);

        // 지금 회전방향, 목적 회전방향, 회전양(델타타임 넣음으로서 속도 조절 가능)  
        transform.rotation = Quaternion.Slerp(
            transform.rotation, tarRot, rotSpeed * Time.deltaTime);
        transform.Translate(new Vector3(0, 0, movementSpeed * Time.deltaTime));
    }

    void GetNextPosition()
    {
        tarPos = new Vector3(Random.Range(minX, maxX), 0f, Random.Range(minZ, maxZ));
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////

센서 구현 ( 상속 사용)

센서 에 공통점이 있음 (무엇을 감지할것인지, 등등)

센서 클래스 를 만들고 자식 클래스로 시각,청각을 넣을것임

부모클래스 가 될 클래스 를 만든다 (따로 오브젝트 에 넣지 않을거임)
프로젝트뷰에서 스크립트 생성후 Sense 로 변경

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Sense : MonoBehaviour
{
    // 디버그 모드 인지 확인용 변수
    public bool bDebug;

    // Aspect 우리가 만든 클래스(플레이어 인지 적인지 확인용)
    public Aspect.AspectName aspectName;

    // 몇 초 주기로 확인 용 변수
    public float detectionRate;


    // protected : 자식 클래스에만 공개
    // 시간 더하기 전용 변수
    protected float elapsedTime;

    // 자식 클래스에서 Start()메소드 내용을 상속
    // 메소드를 자식클래스에서 하나 하나 만들어서 스타트 메소드를 구현해도 되는데
    // 그러면 상속클래스 만드는게 의미 없음(공통점을 부모 클래스에 넣어놓기 때문)
    
    // virtual(가상) 으로 메소드를 만들어서 자식에게 상속
    // 가상으로 만든 이유는 자식 오브젝트마다 메소드 내용이 다르기 때문
    protected virtual void Initialise() { }

    protected virtual void UpdateSense() { }

    private void Start()
    {
        elapsedTime = 0f;
        Initialise();
    }

    private void Update()
    {
        elapsedTime += Time.deltaTime;
        if (elapsedTime > detectionRate)
        {
            UpdateSense();
            elapsedTime = 0f;
        }
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

상속받는 자식클래스 생성

AI Character 에 Perspective 스크립트 생성

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

// Sense 클래스 를 상속 받음
// 시각 센서
public class Perspective : Sense
{
    // 시야 각도
    public float fieldOfView;
    // 시야 거리
    public float viewDistance;

    // 적 오브젝트의 위치값
    Transform enemyTrans;

    // 시야 센서 사용할때 레이케스트 사용
    Vector3 rayDirection;

    // 부모의 가상 클래스 덮어 쓰기
    // 부모크래스에서 스타트 메소드를 상속받았음
    // 부모클래스의 가상메소드를 덮어쓰기
    protected override void Initialise()
    {
        enemyTrans = GameObject.FindGameObjectWithTag("Enemy").transform;
    }

    protected override void UpdateSense()
    {
        DetectAspect();
    }

    void DetectAspect()
    {
        RaycastHit hit;
        rayDirection = enemyTrans.position - transform.position;

        /* Vector3.Angle : 두 벡터값 의 작은값 을 계산 해줌
           (목표 벡터, 기준벡터(transform.forward : 정면) */
        if (Vector3.Angle(rayDirection, transform.forward) < fieldOfView)
        {
            /* 중간에 벽이 가로막는지 확인 하려고 Ray를 쏨
               기준벡터, 목표벡터, 저장할 변수, 쏘는 최대거리 */
            if (Physics.Raycast(transform.position, rayDirection, out hit, viewDistance))
            {
                // 벽에 맞은건지 적 오브젝트에 맞은건지 확인용(Ray 쏠 때 레이어 감지로 해도 됨)
                Aspect aspect = hit.collider.GetComponent<Aspect>();
                // Aspect 컴포넌트가 있으면 if문이 참
                if (aspect != null)
                {
                    // aspect.aspectName 이 aspectName(부모클래스에서 만들어진 변수) 와 같은지
                    if (aspect.aspectName == aspectName)
                    {
                        Debug.Log("Enemy Detected");
                    }
                }
            }
        }
    }
    
    // 디버그용 시야각 확인용
    private void OnDrawGizmos()
    {
        // 디버그 모드가 거짓이거나 적오브젝트가 없을때 리턴
        if (enemyTrans == null || !bDebug)
            return;

        // 해당오브젝트에서 적 오브젝트 로 빨간선을 쏨
        Debug.DrawLine(transform.position, enemyTrans.position, Color.red);

        // 해당 오브젝트 위치에서 정면으로 시야거리만큼 의 벡터값
        Vector3 frontRayPoint = transform.position + (transform.forward * viewDistance);

        // 좌우 벡터 구하기
        Vector3 dirRight = transform.forward + transform.right;
        Vector3 dirLeft = transform.forward - transform.right;

        // 시야거리보다 길기 때문에 정규화 함
        // Normalize() 는 원본의 값을 바꿈
        // normalized 는 값을 넘겨주는 방식
        dirRight.Normalize();
        // dirRight = dirRight.normalized; 와 같은 코드
        dirLeft.Normalize();

        // 위에 정면 방향거리 구하는것과 같은 방식
        Vector3 leftRayPoint = transform.position + dirLeft * viewDistance;
        Vector3 rigRayPoint = transform.position + dirRight * viewDistance;

        // 위에 적오브젝트 와 선 연결 한 것 과 같은 방식
        Debug.DrawLine(transform.position, frontRayPoint, Color.green);
        Debug.DrawLine(transform.position, leftRayPoint, Color.green);
        Debug.DrawLine(transform.position, rigRayPoint, Color.green);

    }
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

AI Character 오브젝트 에 자식오브젝트로 빈오브젝트 Sensor 생성

Sensor 오브젝트에 Touch 스크립트 생성


using System.Collections;
using System.Collections.Generic;
using UnityEngine;

// 부모클래스 상속
public class Touch : Sense
{
    private void OnTriggerEnter(Collider other)
    {
        // 닿은 오브젝트의 Aspect 컴포넌트 가져오기
        Aspect aspect = other.GetComponent<Aspect>();

        // 비어있지 않으면
        if (aspect != null)
        {
            // 목표 이름과 같은지 확인
            if (aspect.aspectName == aspectName)
            {
                Debug.Log("Enemy Touch Detected");
            }
        }
    }
}


/////////////////////////////////////////////////////////////////




