
프로토 타입 단계 부터 시작

씬 이름 변경 > MainScene

바닥 추가
3D 오브젝트 Plane 추가 > Ground 로 이름 변경
스케일 10, 1, 10

프로젝트뷰 Materials 폴더 추가 > 마테리얼 생성 Mat_Ground 로 변경 색 지정
Ground 에 넣기

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Capsule 오브젝트 추가 > Player 로 변경
위치값 0, 1, 0

MainCamera 오브젝트에 CamRotate 스크립트 생성

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CamRotate : MonoBehaviour
{
    // 회전 속도 변수
    public float rotSpeed = 200f;

    float mX = 0f;
    float mY = 0f;

    private void Update()
    {
        // 마우스 입력을 받음
        float mouse_X = Input.GetAxis("Mouse X");
        float mouse_Y = Input.GetAxis("Mouse Y");

        // 회전값 변수에 마우스 입력값만큼 미리 누적
        mX += mouse_X * rotSpeed * Time.deltaTime;
        mY += mouse_Y * rotSpeed * Time.deltaTime;

        // 마우스 상하 이동 회전 변수(mY) 의 값을 -90 ~ 90 도 사이로 제한
        mY = Mathf.Clamp(mY, -90, 90);

        // 마우스 입력 값을 이용해 외전 방향을 결정(X축기준 회전 : 상하, Y축 기준 회전: 좌우)
        // 회전 방향으로 오브젝트 회전
        transform.eulerAngles = new Vector3(-mY, mX, 0);
    }
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

플레이어 회전 구현

Player 오브젝트에 PlayerRotate 스크립트 생성

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerRotate : MonoBehaviour
{
    // 회전 속도 변수
    public float rotSpeed = 200f;

    // 회전값 변수
    float mx = 0f;

    private void Update()
    {
        // 마우스 좌우 입력을 받음
        float mouse_X = Input.GetAxis("Mouse X");

        // 회전 값 변수에 마우스 입력 값만큼 미리 누적
        mx += mouse_X * rotSpeed * Time.deltaTime;

        // 회전 방향으로 물체를 회전기킴
        transform.eulerAngles = new Vector3(0, mx, 0);
    }
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

카메라 위치를 플레이어 와 동기화

Player 오브젝트에 자식 오브젝트로 빈오브젝트 CamPosition 생성
위치값 0, 0.25, 0

MainCamera 오브젝트에 CamFollow 스크립트 생성

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CamFollow : MonoBehaviour
{
    // 목표가 될 트랜스폼 컴포넌트
    public Transform target;

    private void Update()
    {
        // 카메아의 위치를 목표 트랜스폼의 위치에 일치시킴
        transform.position = target.position;
    }
}

target 에 CamPosition 참조 연결

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Player 움직임 구현

Player 오브젝트에 PlayerMove 스크립트 생성

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerMove : MonoBehaviour
{
    public float moveSpeed = 7f;

    private void Update()
    {
        // 사용자의 입력을 받음
        float h = Input.GetAxis("Horizontal");
        float v = Input.GetAxis("Vertical");

        // 이동 방향을 설정
        Vector3 dir = new Vector3(h, 0, v);
        dir = dir.normalized;

        // 메인 카메라를 기준으로 방향을 추가로 변환(Translate 말고 이방법도 있음)
        // 문제는 하늘을 바라보면 위로 떠버림
        dir = Camera.main.transform.TransformDirection(dir);

        // 이동 속도에 맞춰 이동
        transform.position += dir * moveSpeed * Time.deltaTime;
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

중력 적용

위를 바라볼시 공중에 뜨는 문제 해결하기위해 중력 만들기

Player 오브젝트 선택 Character Controller 컴포넌트 추가

Character Controller 에는 이미 Collider 가 있기 때문에 
기존에 있던 Collider 컴포넌트 는 제거

PlayerMove 스크립트 열기

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerMove : MonoBehaviour
{
    // 이동 속도 변수
    public float moveSpeed = 7f;

    // 캐릭터 컨트롤러 변수
    CharacterController cc;

    // 중력 변수
    float gravity = -20f;

    // 수직 속도 변수
    [SerializeField]
    float yVelocity = 0f;

    // 점프력 변수
    public float jumpPower = 10f;

    // 점프 상태 변수
    public bool isJumping = false;

    private void Start()
    {
        cc = GetComponent<CharacterController>();
    }

    private void Update()
    {
        // 사용자의 입력을 받음
        float h = Input.GetAxis("Horizontal");
        float v = Input.GetAxis("Vertical");

        // 이동 방향을 설정
        Vector3 dir = new Vector3(h, 0, v);
        dir = dir.normalized;

        // 메인 카메라를 기준으로 방향을 추가로 변환(Translate 말고 이방법도 있음)
        // 문제는 하늘을 바라보면 위로 떠버림
        dir = Camera.main.transform.TransformDirection(dir);

        // 점프 후 바닥에 닿은 상태인지 확인
        if (isJumping && cc.collisionFlags == CollisionFlags.Below)
        {
            // 점프 가능하게 변경
            isJumping = false;

            // 캐릭터의 수직속도를 0으로 만듬
            yVelocity = 0f;
        }

        // 만약 Spacebar 키를 입력했으면
        if (Input.GetButtonDown("Jump") && !isJumping)
        {
            // 캐릭터 수직 속도에 점프력 적용
            yVelocity = jumpPower;
            isJumping = true;
        }

        /* 이동 속도에 맞춰 이동 (캐릭터 컨트롤러로 이동함)
        transform.position += dir * moveSpeed * Time.deltaTime; */

        // 캐릭터 수직 속도에 중력 값을 적용
        yVelocity += gravity * Time.deltaTime;
        dir.y = yVelocity;

        // 이동속도에 맞춰 이동
        cc.Move(dir * moveSpeed * Time.deltaTime);
    }
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

수류탄 구현

3D 오브젝트 Sphere > Bomb 으로 변경 > 위치값 초기화

RigidBody 컴포넌트 추가

BombAction 스크립트 추가

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BombAction : MonoBehaviour
{
    public GameObject bombEffect;


    // 충돌시 처리
    private void OnCollisionEnter(Collision collision)
    {
        // 이펙트 프리팹 생성
        GameObject eff = Instantiate(bombEffect);

        // 이펙트의 위치는 자기 자신과 동일
        eff.transform.position = transform.position;

        // 자기자신 제거
        Destroy(gameObject);
    }
}

Bomb 을 프리팹으로 저장

/////////////////////////////////////////////////////////////////////////////////

에셋다운
에셋의 스크립트 폴더 제거

Exploson1 프리팹 의 스크립트 들 제거, 
자식오브젝트 의 Explosion - [Explosion6] 에 Simulation Speed 값을 2로 설정

프리팹의 부모 오브젝트에 DestroyEffect 스크립트 추가

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class DestroyEffect : MonoBehaviour
{
    // 제거될 시간 변수
    public float destroyTime = 1.5f;

    //경과 시간 측정용 변수
    float currentTime = 0;

    private void Update()
    {
        // 만일 경과 시간이 제거될 시간을 초과하면 자기 자신을 제거
        if (currentTime > destroyTime)
        {
            Destroy(gameObject);
        }
        // 경과시간 누적
        currentTime += Time.deltaTime;
    }
}


위 코드 말고 Start() 에 Destroy(gameObject,1.5f); 해도 똑같음

////////////////////////////////////////////////////////////////////////////////////////////////////

Exploson1 프리팹 저장 후 오브젝트 로 끌어온 뒤 FX_Bomb 으로 이름 변경
자주 사용할 프리팹 폴더를 따로 만들고 그곳에 오리지날 프리팹으로 FX_Bomb 저장

///////////////////////////////////////////////////////////////////////////////////////////////////

BombAction 의 Bomb Effect 칸에 FX_Bomb 을 참조 연결

수류탄이 플레이어 와 닿아도 터지는 문제 를 없애기 위해 Layer 를 추가
각각 오브젝트에 맞는 레이어 추가후 Edit > Project Settings > Physics 에서 설정

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Player 오브젝트에 PlayerFire 스크립트 추가





