
유니티 그래픽스 최적화

최적화 필요성
최적화를 신경 쓰지 않고 유저들이 불쾌함을 느끼는 경우가 생김
화면이 버벅이며 끊기는 느낌,부드럽지않게 갱신,입력 딜레이 등

최적화 시기
개발 초반부 기간을 제외한 모든 개발 기간동안 항상 신경써야함

보통 그래픽 쪽에 부하가 많이 걸리며 코드 잘못짜도 렉이 걸리긴 하다

////////////////////////////////////////////////////////////////////////

누구의 책임인가
프로그래머와 아티스트 모두 신경써야 하는 부분,
그래픽 요소의 최적화는 아티스트 의존성이 크다.

최적화 작업이 필요한 이유
게임이 리얼타임(real time), 실시간으로 렌더링이 이루어지기 때문

//////////////////////////////////////////////////////////////////////////////////////

렌더링
컴퓨터가 주어진 데이터(게임오브젝트, 위치값, 쉐이더, 카메라가 촬영하는 화면 등)
를 기반으로 이미지를 만들어 내는 과정

하나의 장면에 대하여 도형들의 배치에 대한 정보, 텍스처, 라이팅, 쉐이딩 등 정보를 중ㅁ
그래픽 처리 전용 프로세서의 GPU 가 그래픽 파이프 라인을 거쳐 이미지를 만들어냄

영화, 애니메이션, 화면 디스플레이, 웹 브라우저 의 글자나 이미지 출력 등

//////////////////////////////////////////////////////////////////////////////////////////////////

비실시간 렌더링 (non-realtime)
영화나 애니메이션은 정해진 장면을 모두 미리 렌더링
렌더링한 이미지를 프레임별로 나열해 동영상을 만듦
고품질의 그래픽을 만들기 위해 비싼 연산과 많은 렌더링시간을 투자

 실시간 렌더링(realtime)
-게임의 렌더링은 사용자의 반응과 입력에 따라 달라짐
-씬의 렌더링을 매우 빠른 속도로 수행하는 것이 중요

///////////////////////////////////////////////////////////////////////////////////////////////////////////

 FPS(Frames per second)
-렌더링 속도 측정 기준 단위
-초당 몇 프레임을 렌더링 하는가
 영화나 애니메이션은 24FPS 에 불과하고, 게임은 40~60FPS 목표치를 삼는다.

 모바일 디바이스 의 성능
-데스크톱과 다르게 모바일 기기는 항상 전원이 연결되어 있는 상황이
 아니므로 전력소모에 맞추어 만듦 (+발열)

//////////////////////////////////////////////////////////////////////////////////////////////

 쓰로틀링(Throttling)
-기기의 발열이 심해져서 온도가 일정 이상 높아지면 발열을 낮추기 위해 자동으로
 기기 성능을 낮추는 기능
-쓰로틀링 상태로 진입하면 기기의 연산속도가 느려저 FPS 가 떨어지므로
 쓰로틀링 상태가 되지 않도록 최적화 시키는 것이 중요

////////////////////////////////////////////////////////////////////////////////////////////////

 엔진과 그래픽스 API
- 유니티는 멀티플랫폼 엔진으로 다양한 그래픽 칩셋에서 렌더링이 지원됨
- 다양한 종류의 GPU 들은 각각의 펌웨어 및 드라이버를 제공하고,
  각각의 GPU 및 OS 별로 따로 신경 쓰지 않고 렌더링 소프트웨어(Maya, 3dsMax)
  를 만들 수 있도록 그래픽스 API(DirectX, OpenGL)가 제공
- 하지만 그래픽 API도 OS 에 따라 다양하게 존재함
- 유니티는 알아서 각 플래폼에 맞는 그래픽 API 로 렌더링 해줌

//////////////////////////////////////////////////////////////////////////////////////////////////

 OpenGL & OpenGL ES
- OpenGL    : 컴퓨터 그래픽스 의 표준 규격을 기준을 기반으로 발표한
              2D,3D 그래픽스 표준 API
- OpenGL ES : OpenGL 을 그래도 모바일 시스템에서 구동시키기엔 무리,
              크로노스 그룹은 모바일 환경에서의 2D,3D 그래픽스를 위해
			  더 가벼운 OpenGL ES 제정
- ES 는 Embedded System 으로 OpenGL 에서 잘 사용되지않는 것을 축소하여
  만든 서브셋
  
  Metal
- 애플이 만든 IOS 전용 그래픽스 API
- 대부분의 모바일 장치에서 사용 가능한 OpenGL 은 불필요한 오버헤드 가 발생했지만
  Metal 은 IOS 만 지원함으로 오버헤드 를 줄여 성능을 향상시킴
- 여러 연산을 동시에 병력적으로 진행할 수 있는 멀티쓰레딩에 대응 가능
- CPU 와 GPU 메모리 영역이 구분된 OpenGL 과 달리 Metal 은 구분없이
  메모리를 사용해 효율적으로 관리 가능
  
  Vulkan
- 크로노스 그룹이 만든 차세대 API
- 멀티쓰레드 화 가능으로 CPU 오버헤드 감소

 유니티 설정
Edit > Project Settings > Player > Android Setting
> Other Settings > Rendering > AutoGraphics API 체크 해제

////////////////////////////////////////////////////////////////////////////////////////////////

렌더링 파이프 라인

GPU 의 의미

 랜더링 파이프 라인
- 3D 이미지를 2D 래스터 이미지로 표현하기 위한 단계적인 방법

 그래픽 처리 장치 (Graphics Processing Unit)
- CPU 가 GPU 에 렌더링 명령을 보내고, GPU 는 GPU 메모리(VRAM)를 참고해
  그래픽 처리를 수행
- 모바일 기기에서는 하나의 물리적 RAM에 CPU 메모리와 GPU 메모리 를
  나누어 사용하기도 함
  
/////////////////////////////////////////////////////////////////////////////////////////////

 게임 실행시 초기화 과정을 거치며 필요한 리소스 만듦(Initialization)
- Awake, OnEnable, Start 등

 게임수행시 매 프레임 마다 뎅터 업데이트 후 렌더링
- Update : Physic, Input Events, Game logic 등
- Render : Scene renderingm GUI rendering 등

 게임 종료시 리소스 들이 해제 (Decommissioning)

////////////////////////////////////////////////////////////////////////////////////////////////

 렌더링 루프
- Update 과정은 주로 CPU 에서 이루어지는 연산

- Rendering 과정에서는 렌더링이 진행되며, 순차적으로 그려짐
- 빈 화면 > 캐릭터 > 발판 > 배경...

////////////////////////////////////////////////////////////////////////

 렌더링 파이프 라인 (Rendering Pipeline)
- 3D 오브젝트를 2D 이미지 상으로 그리는 과정
- 애플리케이션 -> 지오메트리 -> 래스터라이저

/////////////////////////////////////////////////////////////////////////////////////////////////

 1. 애플리케이션 스테이지(Update문 이라고 생각하면 편함)
- 렌더링 되기 전 업데이트 및 기타 데이터 처리과정
- 주로 CPU 에서 필요한 연산 처리
- 캐릭터가 이동할 때 - 매 프레임 마다 애니메이션 정보와 뼈대
  위치 연산 밒 메시의 버텍스에 반영

////////////////////////////////////////////////////////////////////////////////////////////////

 2. 지오메트리 스테이지
- 지오메트리를 구성하는 버텍스와 폴릭곤의 처리
- 오브젝트의 각 버텍스틀을 화면상의 적절한 위체에 배치시키는 과정
- 메시(Mesh)
  오브젝트의 형태를 보여줌(그려낸 것 까지)
  Verices(점) > Edges(선) > Polgons(Polys)(면) > 메쉬
  
- 버텍스 트랜스폼(Vertex Transform)
  (1) 월드 트렌스폼 : 원점 기준(0,0,0) 의 메시 모델에 대한 위치데이터만 가지고 있는
                로컬 스페이스를 3D 공가낭의 특정 위치인 월드 스페이스로 변환

  (2) 뷰 트랜스폼 : 오브젝트를 카메라에 상대적인 위치로 변환하기 위해 월드 스페이스를 카메라(뷰)로 전환

  (3) 프로젝션 트렌스폼 : 3D 공간을 2D 상의 위치로 매칭하는 과정

원근투영(Perspective Projection) : 원근법이 적용된 프로젝션 트랜스폼
직교투영 (Orthographic Projection) : 원근법 미적용
  

- 버텍스 쉐이더 (Vertex Shader)
  버텍스 별로 값을 설정하는 과정
- (1) 월드-뷰-프로젝션 트랜스폼 변환 : 메시의 버텍스를 적절한 위치에 있도록
                                  버텍스에 행렬을 곱해줌으로 써 수행

- (2) 왜곡 : 특수한 효과를 위해 버텍스의 노멀 방향으로의 확장 등

- (3) 노멀 및 걸러 결정 : 라이팅이 픽셀별이 아닌 버텍스 별로 처리 된다면
                        버텍스 쉐이더에서 라이팅 처리가 되고,
					    버텍스컬러에 라이팅 결과 반영



 지오메트리(Geometry) 생성
- 버텍스 쉐이더를 거치고 나면 버텍스들이 연결되어 선이 만들어지고 도형의 형태가 됨.
  이러한 도형의 형태를 지오메트리 라고함

- 버텍스 쉐이더 에서 트랜스폼이 결정되고 나면 자동으로 이루어지는 과정

- 파이프라인에 입력받은 버텍스들은 모두 지오메트리화
  (화면 밖에 렌더링 되지 않는 버텍스 들도 적용)

- 그만큼 버텍스가 많으면 지오메트리 스테이지에서 병목이 발생할 확률이 높음
  -> 카메라 영역 밖에 있는 오브젝트들은 파이프 라인을 거치지 않도록 하는
	 컬링 기법 등이 있음

////////////////////////////////////////////////////////////////////////////////////////////////  
  
 3. 레스터라이저 스테이지
- 오브젝트를 그리는 픽셀을 추리고 그 픽셀의 색을 결정하는 과정
- 메시의 폴리곤에 속한 영역을 픽셀로 매칭 시키는 과정

 뎁스 버퍼, z버퍼
 - 픽셀의 색상 정보는 컬러버퍼의 R,G,B a 4가지 채널에 저장되는 것처럼
   픽셀의 깊이값을 저장하는 버퍼(Z버퍼는 컬러버퍼와 동일한 해상도)
 
 - 화면에 가까운 위치에 있는 오브젝트가 먼저 그려지고 뒤에 가려지는 오브젝트가 그려짐
   단점으로 처음 오브젝트가 반투명이면 뒤에 오브젝트 색상에 연산을 그만큼 더함
   
 - 픽셀의 깊이값은 카메라로부터의 거리 이며 Z버퍼를 이용해
   픽셀이 렌더링 될 때마다 깊이 판정을 수행

 프래그먼트/픽셀 쉐이더(Fragment/Pixel Shader)
- Fragment : 화면상에 최종 Pixel이 되기전 의 데이터 (픽셀이라 해도 무방)
- 픽셀들의 최종 렌더링 색을 계산하기 위해 텍스처로부터 색을 읽어오고
  그림자를 적용하는 등의 일을 처리

 알파 블렌딩(Blending)
- 투명도를 가지는 오브젝트가 거치는 과정으로 쉐이더에서 결정되는
  알파값과 해당 픽셀 위치의 컬러 버퍼의 값을 적절히 혼합하여 최종 출력 색생 결정

//////////////////////////////////////////////////////////////////////////////////////////////////////////

정리

모든 오브젝트가 렌더링 될 때마다 이러한 과정을 거치며 버퍼에 차곡차곡 그려짐
 
 더블 버퍼링
- 두개의 버퍼를 번갈아 가면서 렌더딩한 후 화면에 보여주는것
- 화면에 보이고 있는 버퍼는 프론트 버퍼, 렌더링 되는 버퍼는 백버퍼

 렌더 루프
 Update -> Cull(카메라에 보이지 않는부분 을 필터링 함)
 -> Scene Render(작업이 끝나면 2D에 보이는 이미지 작업이 끝남)
 -> PostProcessing
 
 1. 업데이트 : 렌더링 전 연산
 2. 컬링     : 불필요한 렌더링 부하를 방지하기 위한 컬링 연산
 3. 씬 렌더링 : 오브젝트마다 드로우콜 이 발생하며 버텍스/프래그먼트 쉐이터, Z테스트,
               알파 블랜딩 등의 GPU 파이프 라인을 거쳐 버퍼에 순차적으로 렌더링
			   월드 위치값을 찾아 어느 픽셀에 그려줘야 하는지 계산
			   (부하 제일 심함)
 4. 포스트 프로세싱(후처리) : 블룸이나 컬러 그레이딩 등의 포스트 프로세싱 처리.
                           한번 이상의 드로우 콜이 발생
 5. 디스플레이(더블 버퍼링) : 현재 프레임이 렌더링 되고 있는 백버퍼는 프론트 버퍼로 교체되어 화면에 나타나고,
                           기존의 프론트버퍼는 다음 프레임 렌더링을 위해 백버퍼가 됨
						   (부하 많이 안먹음)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

병목

- 전체 시스템의 성능이나 용량이 하나의 구성 요소로 인해 제한 받는 현상
- 어떤 부분에서 병목인지를 정확하게 찾는 과정인
  프로파일링을 한 뒤에 최적화 작업을 진행하는 것이 중요

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 타깃 전정
- 먼저 기준이 되는 하드웨어 스펙을 결정하여 그 기기에서
  최소한의 자원 소모로 최고의 품질을 끌어 내도록 함
  
- 타깃 기기 외의다얄한 기기에서도 검증 필요

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 FPS vs Frame Time
- Frame Time : 한 프레임을 처리하는데 걸리는 시간 (1/1000초, ms단위)
- 프로일링 할때 FPS 보다 Frame Time 으로 하는것이 좋음
  (오브젝트 1개가 늘어날때 마다 프레임 이 낮아질때
   오브젝트 1개 90FPS = 1000/90 = 11.1ms
   오브젝트 1개 45FPS = 1000/45 = 22.2ms ...)

/////////////////////////////////////////////////////////////////////////////////////////////////////////

유니티 FPS 수치 확인
플레이시 게임뷰 > 오른쪽 상단 Stats(프레임 제한 안했을시 확인 가능)
그런데 이 수치는 유니티 에서 확인하는 프레임 값임, 빌드했을시 수치 달라질 수 있음

스크립트로 FPS 확인

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class DisplayFPS : MonoBehaviour
{
    [SerializeField] Text text;

    float frames = 0f;
    float timeElap = 0f;
    float frameTime = 0f;

    private void Update()
    {
        // 프레임마다 1올림
        frames++;
        // TimeScale 값 무시한 프레임 시간 더하기
        timeElap += Time.unscaledDeltaTime; // frame time 더하기

        // 약 1초가 흘렀을때
        if (timeElap >= 1f)
        {
            // 프레임타임 = 약1초 / 프레임
            frameTime = timeElap / frames;

            UpdateText();

            timeElap = 0;
            frames = 0f;
        }
    }
    void UpdateText()
    {
        text.text = string.Format("FPS : {0}, FrameTime : {1:F2} ms", frames, frameTime * 1000);
    }
}

빈 오브젝트 > DisplayFPS > 스크립트 삽입
UI > Text > Text_DisplayFPS > 위치 알아서

DisplayFPS 에 Text_DisplayFPS 참조연결

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 구간 측정
- FPS 로만 확인하는 것이 아닌, 각 함수 별 시간을 확인
- 리얼타임 렌더링 애플리케이션 의 코드 측정 시 각 프레임을 렌더링 하기위해
  함수들이 수행되는 과정에서 얼마만큼의 시간이 소비되는지가 중요
  
 측정 시나리오
- 데이터 측정 시 여러 번 측정한 후 평균값을 사용하도록
- 그래픽 관련 설정(렌더링 패스, 포스트프로세싱 효과 등)으로 FPS가 낮은 경우도 있음

 Target Frame Rate
- 쓰로틀링 상태의 진입을 최소화하기 위해 낮은 프레임으로 강제 고정 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 VSync(수직 동기화)
- 수직동기 : 디스플레이 모니터의 측면

- 모니터의 화면 갱신 주파수의 한계를 넘는 신호 입력 시
  화면이 물결치거나 찢어지는 듯한 영상 발생

- 티어링(Tearing) : 백버퍼 와 프론트 버퍼 전환시, 두 화면이 섞여 출력되어
                   순간적으로 화면이 찢어지는 것처럼 보이는 현상 이 연속적으로
				   쌓이며 화면이 물결치는 현상

- 디스플레이 모니터의 주파수에 맞게 렌더링 퍼포먼스가 조절되며 티어링을 방지

- 강제로 Target Frame Rate가 설정되는 것과 비슷한 효과가 발생하므로
  병목 측정 시에는 VSync를 비활성화하는 것이 좋음

모니터에 맞춰 렌더링을 맞추기 떄문에 프로파일링 할때 정확하게 안나올수 있음

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

VSync 끄기 

유니티 > Project Settings > Quality > Current Active Quality Level
> VSync Count 값을 Don't Sync 로 변경

///////////////////////////////////////////////////////////////////////////////////////////////////////////

쓰로틀링(Trottling) 을 고려한 측정
1. 타깃 디바이스가 얼마나 빠르게 스로틀링 상태로 진입하고
   어느 정도의 성능 하락이 일어나는지 먼저 체크
   
2. 측정중인 모바일 디바이스를 열기가 나오는곳에서 멀리 떨어뜨림

3. 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 CPU 바운드(bound) vs GPU 바운드(bound)
- 병목이 CPU/GPU에 몰려있는지에 따라 CPU바운드/GPU바운드 로 표현

- CPU와 GPU는 병렬처리이므로 CPU가 일처리하다가 렌더링해야되면 GPU에게 명령을 던지고,
  GPU의 결과를 기다리는 것이 아니라 계속 일처리를 수행

- 어떤 바운드인지 파악하는 것이 중요

- 예) CPU는 끝났지만 GPU가 끝나지 않았다면 CPU는 GPU의 일처리가 
      끝날 때까지 기다림 -> 아무리 CPU의 연산을 줄여도 성능 영향 없음,
	  GPU의 연산을 줄여야 함 (반대 경우도 동일)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

병목 측정

 유니티 내장 프로파일러
- 병목이 GPU바운드인지, CPU바운드인지 쉽게 확인 가능
- 안드로이드, iOS모두 연결해서 실시간 확인 가능
- 애니메이션 연산, 스크립트 시간 소비 여부 확인 가능
- 순간적으로 튀는 프레임 확인

유니티 > WINDOW > Analysis > Profiler > 위치 지정

가로줄 : 흐른 시간
세로줄 : 처리하는데 걸린 시간

Profiler Modules 에서 CPU 바운드 GPU 바운드 확인 가능

시간 대 클릭 하며 수치 확인

아래 TimeLine 을 Hierarchy 로 바꾸고 
Player Loop 를 열면 함수 에서 사용하는 메모리 확인 가능

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GPU 병목 탐지

유니티 내장 프로파일러 > GPU Usage 활성화

유니티 Project Settings > Player > Graphics Jobs 체크해제

Graphics Jobs : GPU 가 해야할일을 CPU 가 어느정도 보탬


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 필레이트 (Fillrate)
- 그래픽 카드가 1초에 스크린에 렌더링할 수 있는 픽셀의 수
- GPU 병목의 높은 확률을 가지는 원인 중 하나
- 렌더링할 픽셀 수를 줄이기 위해 디스플레이 되는 해상도를 줄였을 때 게임 성능이 향상된다면 필레이트 병목일 확률이 높음


 오버드로우 (Overdraw)
- 화면에 렌더링되는 하나의 픽셀이 여러 번 덧그려지는 현상
- 이미 채워진 픽셀에 또 다른 오브젝트를 렌더링하면서 다시 그려지는 경우
- Z버퍼가 오버드로우를 방지
- 불투명(Opaque) 오브젝트 -> 렌더링 전 Depth로 정렬한 뒤 
  맨 앞에 있는 오브젝트를 먼저 렌더링하고, 뒤에 그려지는 오브젝트의 픽셀 중
  앞의 오브젝트에 가려지는 픽셀의 렌더링은 건너뜀
- 투명(Transparent) 오브젝트-> 불투명과 반대로 정렬하여 
  뒤의 오브젝트를 먼저 렌더링하며 모든 픽셀에서 오버드로우가 발생
- 투명 오브젝트는 필요한 곳에서만 최소로 사용

쉐이더 Unlit 쓸때 알파값이 없으면 Texture, 알파값이 있으면 Transparent 사용

////////////////////////////////////////////////////////////////////////////////////////

이펙트 를 카메라에 보이게 해놓고 재생
씬뷰 오른쪽 상단 메뉴 중 가장 왼쪽의 버튼 > Overdraw
밝을수록 오버드로우 임

////////////////////////////////////////////////////////////////////////////////////////////////////////

 포스트 프로세싱 (Post Processing)
- 필레이트에 영향을 미치는 주요 요인인 프래그먼트 쉐이더가 무거워지는
  흔한 원인은 포스트 프로세싱(이미지 효과)임
- 픽셀 단위로 처리하기 때문에 프래그먼트 쉐이더의 비용이 비쌈 
  (Color Grading, Bloom에 비해 DOF(Depth of Field 는 성능 부담이 큼)
- 해상도를 줄이는 것이 가장 쉽게 접근할 수 있는 해결책

////////////////////////////////////////////////////////////////////////////////////////////////////////////

 업스케일링 샘플링 (Upscale Sampling)
- 위처럼 룩앤필(Look&Feel)을 고품질로 유지하고 싶으면 해상도를 줄이는 것이 가장 간단한 해결방법
- 해상도를 낮출 때 UI는 냅두고 3D씬만 낮은 해상도로 렌더링하는 트릭

 구현 스텝
저해상도 렌더 텍스처 생성
3D 씬을 렌더텍스처에 렌더링
렌더 텍스처를 업스케일링 해서 련재의 백 버퍼에 렌더링
오버레이 UI 를 렌더링(덮어쓰기)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 폴리곤 (Polygon)
- 씬에 렌더링 되는 버텍스들의 수가 많으면, 즉 폴리곤이 많으면
  GPU에서 버텍스 쉐이더를 많이 수행하므로 렌더링 파이프라인의
  지오메트리 스테이지에서 병목 발생
- LOD(Level of Detail)은 오브젝트의 시각적인 디테일을
  여러 단계로 나누는 기술로,
  카메라로 멀리 떨어지거나 화면 내 차지 비율이 적은 경우
  오브젝트의 디테일을 줄이는 것 -> 폴리곤의 수는 적어지고 시각적인 티가 덜남


- 모델 데이터의 버텍스를 줄이려면 맥스, 마야 등의 DCC툴이 필요하지만 에셋 스토어에 자동으로 LOD용 메시를 자동으로 만들어주는 툴이 존재
- Project Setting의 Quality (퀄리티 셋팅 윈도우)에서 LOD Bias를 조절, 1보다 작으면 높은 레벨의 LOD(낮은 수의 폴리곤 메시)를 렌더링


 텍스처 (Texture)
모바일 디바이스는 대역폭이 작아 일정 크기 이상의 텍스처 사용 시 성능 하락
전체 텍스처의 해상도를 조절하여 텍스처로 인한 대역폭의 문제 여부를 확인 가능
Project Setting의 Quality (퀄리티 셋팅 윈도우)에서 Texture Quality로 조절

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

드로우콜
Stats 의 Batches, SetPass calls 가 적어야 좋음

 드로우콜의 이해
- CPU가 GPU에 오브젝트를 그리라는 명령을 호출하는 것
- 컬링 : 카메라의 시야 밖에 위치하는 오브젝트는 렌더링 대상에서 제외하는 과정
- 컬링 과정을 거친 오브젝트가 렌더링 되려면 CPU로부터 GPU에 정보가 전달되어야 함
- CPU와 GPU의 메모리 공간은 독립적
- 스토리지로부터 파일을 읽어와 CPU메모리에 데이터를 올리고,
  렌더링 되기 전 CPU 메모리의 데이터 중 메시 정보를 GPU 메모리에 복제하여
  GPU에서 접근할 수 있도록 함


   Data            CPU              GPU
  Storage   >   CPU Memory   >   GPU Memory

- 위의 데이터 전달 과정을 매 프레임마다 수행하면 치명적 성능 하락
- 로딩 시점에 메모리에 데이터를 올려두고 적절한 시점(씬 변환 등)에 데이터를 해제 (게임이 수행되는 동안은 데이터가 계속 메모리에 상주)

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 렌더 상태(Render States)
- 그려야 하는 상태 정보를 담는 GPU의 테이블
- CPU의 명령을 기억하여 어떤 텍스처, 쉐이더, 버텍스들을 사용할 것인지 기억, 즉 GPU 메모리의 데이터 위치 정보(메모리 주소)를 가짐

- CPU가 렌더 상태를 변경하는 명령을 보내고, GPU는 렌더 상태에 오브젝트를 그리기 위한 정보 저장
- 텍스처 상태 슬롯, 렌더링 모드 (z테스트, 알파 블렌딩 등) 정보 슬롯 등 존재
- CPU가 마지막으로 메시를 그리라는 Draw Primitive Call (DP Call) 명령을 GPU에게 보내면 렌더상태의 정보들을 기반으로 오브젝트를 렌더링
- 드로우콜 = 렌더 상태 변경 + DP Call

- CPU는 GPU가 다른 작업을 수행하고 있지 않은 유휴(idle)상태까지
  기다려야 하므로 사실 CPU에서 GPU로 바로 명령을 보내면 성능 문제 발생
- CPU의 명령을 커맨드 버퍼에 쌓아두고 GPU가 작업이 끝나면 커맨드
  버퍼에서 다음 할 일을 가져가 CPU와 GPU가 서로의 간섭 없이 병렬 작업을 수행
  Que 와 관련

- 그래픽스 API가 호출되면 드라이버 칩셋에 알맞게 신호를 전달하여
  GPU에 맞게 명령을 해석하고 변경하는 과정을 거침
- 하지만 위와 같은 과정은 오버헤드를 발생시키므로 드로우콜은
  CPU 바운더리의 오버헤드가 됨
- 즉, 드로우콜은 CPU 성능에 의존적이며, 드로우콜로 인한
  성능 하락을 줄이기 위해서는 드로우콜 횟수를 줄여야 함

//////////////////////////////////////////////////////////////////////////////////////////////////////////

 드로우콜의 발생 조건
- 오브젝트 하나에 메시 1개, 머터리얼 1개 -> 드로우콜 1번
- 메시가 여러 개인 경우
   예) 캐릭터 오브젝트의 머리, 몸통, 팔, 다리 등 따로따로 이루어진 경우
       메시의 개수만큼 드로우콜 발생

- 머터리얼이 여러 개인 경우
   예) 한 메시에 몸통 머터리얼, 눈 머터리얼(몸통과 눈 2개의 서브메시가 존재)
       머터리얼의 개수만큼 드로우콜 발생

- 쉐이더에 의한 경우
   멀티 패스(Multi pass)로 두 번 이상 렌더링되면 드로우콜이 늘어남
   예) 툰 쉐이더 – 외곽선

- 데스크톱 CPU에서는 프레임당 1000개의 드로우콜이 넘어도 가능하지만
- 모바일 CPU에서는 프레임당 100개도 많음 (최신 디바이스는 200개 정도)

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 Batch & SetPass
- 드로우콜은 포괄적인 개념이고, 유니티에서는 Batch와 SetPass라는
  용어로 나누어 표시
- Batch : DP Call과 상태 변경 등을 합친 넓은 의미의 드로우콜
- SetPass : 드로우콜이 일어날 때 상태 변경의 발생 여부
            (메시 변경은 포함하지 않음)
- SetPass가 높으면 CPU 성능이 소모되는 것

예) Batch 10번, SetPass 1번(오브젝트 10개 가 같은경우)
- 10번의 드로우콜 동안 쉐이더 변경 X, 메시 및 트랜스폼 정보 등
  최소한의 상태 변경만 이루어짐

예) Batch 10번, SetPass 10번 (오브젝트 10개가 다 다른경우)
- 10번의 드로우콜 동안 매번 쉐이더 변경 O, 경우에 따라 많은 상태 변경들이 동반

- 만약 CPU 바운드이고, 드로우콜이 병목이라면
  SetPass 수를 줄이는 것이 가장 효율적임
- 서로 다른 메시여도 동일한 머터리얼을 사용하면
  SetPass 수는 늘어나지 않음
- SetPass call이 적으면 Batch 구성이 잘 된 것


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 배칭(Batching)
 배칭의 이해
- 드로우콜을 줄이는 작업으로 1개의 드로우콜이 1개의 배치인데 여러 배치를 하나로 묶어서 하나의 배치로 만드는 것
- 드로우콜을 줄이기 위한 가장 효율적인 기능 중 하나
- 다른 오브젝트, 다른 메시를 사용하더라도 같은 머터리얼을 사용하면 하나의 배치로 구성하는 것이 가능


- 텍스처 아틀라스(Atlas): 다른 메시에도 머터리얼을 공유할 수 있도록
  여러 개의 텍스처를 하나의 텍스처로 합치는 것
- 텍스처를 합치면 해상도가 높아지므로 해상도 고려 필요(그만큼 메모리 먹음)


- 동일한 머터리얼은 동일한 머터리얼 인스턴스를 의미하며 
  아래와 같이 다른 머터리얼 에셋이면 배칭되지 않음

- 스크립트로 머터리얼 접근 시에도 아래와 같이
  속성을 수정하면 머터리얼의 복사본이 생기므로 배칭되지 않음
  GetComponent<Renderer>().material.color.red = color.red;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 배칭은 스태틱 배칭과 다이내믹 배칭 
 두 종류이며 Project Setting > Player에서 사용 여부 체크

 스태틱 배칭(Static Batching)
- 정적이고 움직이지 않는 오브젝트를 위한 배칭 기법
- 주로 배경 오브젝트이며 게임 오브젝트의 인스펙터에서 Static 플래그가 켜져야 함


- 유니티에서 기본 오브젝트들은 Default-Material을
  사용하므로 배칭되는 것을 확인할 수 있음
  

- 사용법은 간단하지만 메모리가 추가로 필요하다는 주의점이 있음
   배칭은 오브젝트를 합쳐서 내부적으로 하나의 메시로 만들기 때문에
   3개의 오브젝트가 1개의 메시만 사용하더라도 
   3개의 메시를 합친 만큼의 추가 메모리가 필요
   (원래 배칭이 아닌 오브젝트인 경우 1개의 메시만 메모리에 상주하고
    이를 매 오브젝트마다 사용해서 렌더링)
- 위처럼 만들어진 새로운 하나의 메시를 GPU가 가져가서 화면에 렌더링하므로 오브젝트마다 상태 변경과 드로우콜 거칠 필요 없이 한 번의 드로우콜로 처리
- 메모리를 희생해 드로우콜을 줄여 런타임 성능을 높임


- 보통 스태틱 배칭 대상의 오브젝트는 처음부터 씬에 존재해야 함
- 런타임 상에서 추가한 정적 오브젝트도 스태틱 배칭으로 묶고 싶다면
  StaticBatchingUtility.Combine()메소드를 이용할 수 있지만
  시간이 많이 필요하므로 추천하지 않음

- Max나 Maya에서 모듈을 조합해 하나의 커다란 메시로 만드는 것 보다
  모듈화하여 배칭하는 것이 더 나음
- 하나의 커다란 메시는 화면에 일부만 보이더라도 메시 전체의 폴리곤이 처리되며,
  배칭되더라도 원래의 오브젝트 기준으로 컬링이 이루어지기 때문







 다이내믹 배칭 (Dynamic Batching)
- 동적으로 움직이는 오브젝트들끼리의 배칭 처리

- Static 플래그 비활성화 된 오브젝트가 대상이며,
  동일한 머터리얼이면 자동으로 배칭 (Player설정에서 Dynamic batching만 활성화하면 됨)

- 런타임에서 이뤄지는 다이내믹 배칭은 매 프레임 씬에서 대상 오브젝트의
  버텍스들을 모아 합치고,
  다이내믹 배칭에 쓰이는 버텍스 버퍼, 인덱스 버퍼에 담음
  -> 매번 데이터 구축과 갱신이 발생하므로 매 프레임마다
  오버헤드가 발생하지만 드로우콜을 줄여서 성능이 향상됨

- 스키닝을 수행하는 Skinned Mesh는 적용 불가
- 스키닝: 기본 T포즈에서 스켈레탄 애니메이션 포즈에 맞춰
  메시의 버텍스 위치들을 보정하며 메시가 변형되는 과정
- 이러한 애니메이션이 적용되는 메시는 Skinned Mesh Renderer라는 특수 렌더러가 적용
- 스키닝 연산은 CPU에서 이루어짐
- CPU 병목인 상황일 때 GPU 스키닝을 활성화하여 GPU에서 스키닝 연산 가능

Project Settings > Player > Other Settings > GPU Skinning

- 버텍스가 너무 많은 메시는 다이나믹 배칭의 대상에서 제외
- 너무 많은 버텍스를 수집하면 오버헤드가 드로우콜의 비용보다 높아질 가능성이 있음


- 일반적으로 메시가 렌더링 될 때에는 버텍스 쉐이더에서
  월드스페이스로의 변환되는 GPU에서의 고속 연산이지만,
  다이내믹 배칭을 위해서는 CPU에서 연산이 이뤄짐
- 이러한 연산 과정이 드로우콜보다 더 많은 시간을 잡아먹으면 오히려 비효율적
- 특히 드로우콜은 그래픽스 API에 영향을 많이 받아
  Apple Metal, Android Vulkan은 OpenGL ES보다 훨씬 빨라서
  다이내믹 배칭의 오버헤드가 크면 비효율적이 되기 쉬움
- 오버헤드가 더 크다고 판단되면 DisableBatching 플래그를 True로 설정할 수 있음
	Sub Shader {
		Tags{ "RenderType" = "Opaque" "DisableBatching" = "True" }
		

2D 스프라이트 배칭
- 2D스프라이트는 버텍스가 적어 효율적인 배칭 가능
- 머터리얼이 같으면 자동으로 배칭
- 그래서 스프라이트들을 하나의 이미지에 모아 넣는 시트로 많이 제작됨 (Sprite mode를 Multiple로 설정)

 스프라이트 아틀라스 (Sprite Atlas)
- 스프라이트들을 하나의 이미지에 모아 넣는 기법
1. Project Settings > Editor > Sprite Packer > Mode 를 Always enabled로 설정
2. Project뷰에서 Sprite Atlas를 생성하고,
   Inspector의 Objects for packing 에 각 스프라이트들을 드래그하여
   Pack Preview를 눌러 패킹 가능

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 GPU 인스턴싱
- 한번의 드로우콜로 오브젝트의 여러 복사본을 렌더링하여 드로우콜을 줄이는 방법
- 배칭과 다르게 별도의 메시를 생성하지 않고,
  인스턴싱 되는 오브젝트의 트랜스폼 정보를 별도의 버퍼에 담음
- GPU가 그 버퍼와 원본 메시를 가져다가 여러 오브젝트들을 한번에 처리하기 때문에
  런타임 오버헤드가 적음 (인스턴싱 처리를 GPU에서 함)
  -> 메시의 버텍스 개수와 상관 없이 동적 오브젝트 배칭 처리 가능
- 동일한 모양의 오브젝트들이 여러 개 렌더링 되는 경우 유용 (우주 운석, 미사일 등)

- Standard 쉐이더를 사용하는 머터리얼의 Enable GPU Instancing을 체크
- Mesh Renderer에만 적용되기 때문에 Skinning Mesh에 적용 안됨
- GPU에서의 처리이므로 디바이스에서 GPU 인스턴싱을 지원하는 경우에만 사용 가능

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 프레임 디버거(Frame Debugger)
-프레임이 어떻게 렌더링되는지 직관적으로 확인 가능
- 각 드로우콜 과정에서 어떤 메시가 렌더링 되는지, 쉐이더의 속성, 배칭 처리 중 드로우콜 발생 시 그 이유 등을 확인할 수 있음
- Window > Analysis > Frame Debugger로 프레임 디버거 창을 열어 원하는 프레임에서 Enable을 누르면 해당 프레임이 렌더링 되며 드로우콜의 숫자가 표시됨
- 드로우콜의 순서 목록과 해당 드로우콜의 속성 창을 확인할 수 있음

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 컬링(Culling)
- 매 프레임마다 화면에 그려질 필요 없는 오브젝트를 걸러내는 과정
- 컬링 과정이 효율적일수록 드로우콜도 줄어들면 CPU와 GPU 성능 절약

 프러스텀 컬링 (Frustum Culling)
- 프러스텀: 카메라를 통해서 씬을 바라보는 영역
- 게임 엔진들은 카메라의 뷰 프러스텀(절두체)로 컬링이 수행되며
  앞부분은 Near Clipping Plane, 뒷부분은 Far Clipping Plane


- 씬에 얼마나 많은 오브젝트가 존재하는가 보다, 렌더링 하는 프레임 내에
  얼마나 많은 오브젝트가 뷰 프러스텀 내에 포함되는가를 따지는 것이 중요
- Far Clipping Plane을 조절해 렌더링 오브젝트 수를 줄이고
  Fog를 활성화하여 여색함을 방지


 오클루전 컬링 (Occlusion Culling)
- 다른 오브젝트에 가려진 오브젝트를 걸러내는 기능
- 주로 실내 씬에서 사용 됨 (벽)
- Window > Rendering > Occulusion Culling 오클루전 창 하단의
  Bake 버튼을 눌러 적용이 가능하고 Visualization 버튼을 누르면
  씬 뷰에서 미리 볼 수 있음

- 오클루전 스태틱 정보를 토태로 연산이 이루어지므로
  오클루전 컬링이 적용되는 오브젝트는 스태틱 플래그를 설정해줘야 함
- 보통 둘 다 체크하고, 일반적으로 Static 전체를 한번에 설정

- Occluder: 다른 오브젝트를 가리는 역할
- Occludee: 다른 오브젝트에 의해 가려지는 역할

- 씬 전체의 정밀도 사전 연산을 위해 일정한 간격의 셀(cell)로 이루어진
  데이터가 필요하므로 스태틱 오브젝트만 가능하다는 한계가 존재
- 하지만 Occludee는 다이나믹 오브젝트도 가능하며 Dynamic Occluded를
  활성화해주면 됨 (주로 캐릭터에 적용)


- Occlustion Culling 창의 Bake 탭에 Smallest Occluder로
  오클루전 컬링의 정밀도를 조절할 수 있음
- 당연히 데이터 크기가 늘어나고 연산 오브헤드가 발생할 수 있으므로
  드로우콜을 줄임으로써 얻는 이득보다 큰지 확인하고 적절한 값을 찾아야 함

 LOD (Level of Detail)
- 오브젝트의 시각적인 디테일을 여러 단계로 나누는 기술
- 야외 씬에서 주로 사용됨
- 뷰 프러스텀 내에 있더라도 멀리 떨어지거나 작은 오브젝트로
  화면 차지 비율이 낮아지면 디테일을 떨어트려 드로우콜을 절약
- 오브젝트에 LOD Group 컴포넌트를 추가하고
  각 LOD의 Renderers에 원하는 메시를 넣고 비율을 지정
