AR Game

3D 프로젝트 생성

Build Settings -> Android -> Switch Platform

Project Settings -> XR Plug-in Management -> ARCore

Window -> Package Manager -> Unity Registry -> AR 검색 -> AR Foundation 설치

---------------------------------------------------------------------------------------

하이어라키 -> XR -> AR Session, AR Session Origin 추가
AR Session Origin 에 AR Camera 가 있음으로 Main Camera 는 제거

빈 오브젝트 생성 -> DetectedPlane 
-> Mesh Filter, Mesh Renderer, Mesh Collider, AR Plane Mesh Visulizer 추가
-> Material 생성 -> M_Plane -> Rendering Mode : Transparent(반투명 하게 할수 있음)
-> M_Plane 마테리얼을 DetectedPlane 에 적용
-> DetectedPlane 을 프리팹으로 저장

AR Session Origin 에 AR Plane Manager 추가
-> Plane Prefab 에 DetectedPlane 넣기
-> Detection Mode : Horizontal

AR Plane Manager : 바닥 확인 용 컴포넌트라 생각하면 됨

---------------------------------------------------------------------------------------

테스트 해보기
Build Settings 에서 씬 추가

Player Settings -> Other Settings -> Rendering -> Auto Graphics 체크 해제
-> Vulkan 제거 -> Multithreaded Rendering 체크 해제

Other Settings -> Identification -> Minimum API Level : Android 7.0(API Level 24)

Other Settings -> Scripting Backend : IL2CPP
-> ARM64 활성화

Build 후 테스트

---------------------------------------------------------------------------------------

 생성된 바닥에 자동차 생성 시키기
AR Session Origin 선택 -> 생성된 바닥에 터치시 인식하게 만들기
-> AR Raycast Manager 추가

카페에서 파일 다운로드

Indicator 선택 Texture Type 이 Default 인 상태로 불투명 하게 해야하는 경우 있음
Alpha is Transparency 활성 후 적용

Material 생성 M_Indicator -> Aldedo 옆 네모칸에 Indicator 이미지 넣기
Rendering Mode : Cutout, 색상은 잘 보이는 색으로 변경

빈 오브젝트 추가 -> Marker -> 자식 오브젝트로 3D 오브젝트 Quad 추가
-> Indicator -> M_Indicator 마테리얼 적용

---------------------------------------------------------------------------------------

AR Session Origin 에 CarManager 스크립트 생성

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.XR.ARFoundation;
using UnityEngine.XR.ARSubsystems;

public class CarManager : MonoBehaviour
{
    public GameObject indicator;

    private ARRaycastManager arManager;

    void Start()
    {
        // 표식 비활성화
        indicator.SetActive(false);

        arManager = GetComponent<ARRaycastManager>();
    }

    void Update()
    {
        // 바닥 감지
        DetectedGround();
    }

    void DetectedGround()
    {
        // 스크린 중앙지점 찾기
        Vector2 screenSize = new Vector2(Screen.width * 0.5f, Screen.height * 0.5f);

        // 레이에 부딪힌 대상들의 정보를 저장할 리스트 변수를 만듬
        List<ARRaycastHit> hitInfos = new List<ARRaycastHit>();

        // 만일, 스크린 중앙지점에서 레이를 발사하였을 때 Plane 타입 추적 대상이 있다면
        if (arManager.Raycast(screenSize, hitInfos, TrackableType.Planes))
        {
            // 표식 오브젝트를 활성화
            indicator.SetActive(true);

            // 표식 오브젝트의 위치 밒 회전 값을 레이가 닿은 지점에 일치
            indicator.transform.position = hitInfos[0].pose.position;
            indicator.transform.rotation = hitInfos[0].pose.rotation;
			
            indicator.transform.position += indicator.transform.up * 0.1f;
        }
        else
        {
            // 그렇지 않다면 표식 오브젝트 비활성화
            indicator.SetActive(false);
        }
    }
}

AR Session Origin 의 CarManager -> Indicator 칸에 Marker 오브젝트 참조

---------------------------------------------------------------------------------------

다운받은 에셋 자동차 프리팹 SportCar20_Static_USA 을 오브젝트로 생성

이름 SportCar 로 변경
크기 0.3, 0.3, 0.3

오리지널 프리팹으로 다시 생성

---------------------------------------------------------------------------------------

자동차 생성하기

CarManager 스크립트 수정

	void Update()
    {
        // 바닥 감지
        DetectedGround();

        // 만일, 인디케이터가 활성화 중이면서 화면 터치가 있는 상태라면
        if (indicator.activeInHierarchy && Input.touchCount > 0)
        {
            // 첫 번째 터치 상태를 가져옴
            Touch touch = Input.GetTouch(0);

            // 만일 터치가 시작된 상태라면 자동차를 인디케이터 와 동일한 곳에 생성
            // Began : 터치 하는 순간
            if (touch.phase == TouchPhase.Began)
            {
                // 만일 생성된 오브젝트가 없다면 프리팹을 씬에 생성 하고 placeObject 에 할당
                if (placedObject == null)
                {
                   placedObject = Instantiate(
                       myCar, indicator.transform.position, indicator.transform.rotation);
                }
                // 생성된 오브젝트가 있다면 그 오브젝트의 위치와 회전값을 변경
                else
                {
                    placedObject.transform.SetPositionAndRotation(
                        indicator.transform.position, indicator.transform.rotation);
                }
            }
        }

    }

MyCar 에 SportCar 프리팹 참조

---------------------------------------------------------------------------------------

자동차 색상 바꾸기
SportCar 프리팹 열어서 보면 SportCar20_Paint_LOD 0 ~ 2 까지 있음
거리별로 지정되어 있기에 3개전부 바꾸거나 Material 을 바꿔야함

이번 예제는 스크립트로 오브젝트 색상을 바꿀것임

SportCar 프리팹에 CarController 스크립트 생성

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CarController : MonoBehaviour
{
    public GameObject[] bodyObject;
    public Color32[] colors;

    private Material[] carMats;

    private void Start()
    {
        // catMats 배열을 자동차 바디 오브젝트의 수만큼 초기화
        carMats = new Material[bodyObject.Length];

        // 자동차 바디 오브젝트의 마테리얼 각각을 carMats 배열에 저장
        for (int i = 0; i < carMats.Length; i++)
        {
            carMats[i] = bodyObject[i].GetComponent<MeshRenderer>().material;
        }

        // 색상 배열 0번에는 마테리얼의 초기 색상을 저장
        colors[0] = carMats[0].color;
    }

    public void ChangeColor(int num)
    {
        // 각 LOD 머테리얼의 색상을 버튼에 지정된 색상으로 변경
        for (int i = 0; i < carMats.Length; i++)
        {
            carMats[i].color = colors[num];
        }
    }
}

SportCar 프리팹 -> CarController -> BodyObject 에 SportCar20_Paint_LOD 0 ~ 2 넣기

---------------------------------------------------------------------------------------

 색상 변경할 버튼 추가하기
Canvas 생성
Canvas 의 자식오브젝트 로 UI -> Button -> Color0Btn 으로 설정
위치값 -250, -860, 0
	  200, 100

이미지 색상 을 SportCar 와 똑같이 설정

텍스트 : 기본색

Color0Btn 복제 Color1Btn, Color2Btn

Color1Btn
X 위치 0, 색상 자유
텍스트 : 선택한 색상

Color2Btn
X 위치 250 색상 자유
텍스트 : 선택한 색상

CarController 의 Color 배열 1번 2번 인덱스에 선택한 색상 적용

---------------------------------------------------------------------------------------

Canvas 를 프리팹으로 만든뒤 SportCar 프리팹에 언팩

각 버튼에 Onclicked() 에 SportCar 프리팹 연결 -> ChangeColor(int) 호출
각각 번호 할당

---------------------------------------------------------------------------------------

UI 터치를 화면 터치로 인식 하는 현상 막기
CarManager 스크립트 수정

    void Update()
    {
        // 바닥 감지
        DetectedGround();

        // 만일, 인디케이터가 활성화 중이면서 화면 터치가 있는 상태라면
        if (indicator.activeInHierarchy && Input.touchCount > 0)
        {
            // 첫 번째 터치 상태를 가져옴
            Touch touch = Input.GetTouch(0);

            // 만일, 현재 클릭 or 터치한 오브젝트가 UI 오브젝트라면 Update 함수를 종료
            // EventSystem : UI 오브젝트만 해당
            if (EventSystem.current.currentSelectedGameObject)
            {
                return;
            }
	.
	.
	.
    }

---------------------------------------------------------------------------------------

MyCar 레이어 생성

SportCar 프리팹 의 SportCar20_Collider -> SportCar20_Body_Col 에 MyCar 레이어 추가 

CarController 스크립트 수정

    private void Update()
    {
        // 만일 터치된 부위가 1개 이상이라면
        if (Input.touchCount > 0)
        {
            Touch touch = Input.GetTouch(0);

            // 만일 터치 상태가 움직이고 있는 중이라면
            if (touch.phase == TouchPhase.Moved)
            {
                // 만일, 카메라 위치에서 정면 방향으로 레이를 발사하여 부딪힌 대상이
                // 6번 레이어 라면 터치 이동량을 구함
                Ray ray = new Ray(
                    Camera.main.transform.position, Camera.main.transform.forward);

                RaycastHit hitInfo;
                
                if (Physics.Raycast(ray, out hitInfo, Mathf.Infinity, 1 << 6))
                {
                    // deltaPosition : 처음 터치 한 곳으로부터 이동한 거리 의 위치값
                    Vector3 deltaPos = touch.deltaPosition;

                    // 직전 프레임에서 현재 프레임까지의 x축 터치 이동량에 비례하여
                    // 로컬 y축 방향으로 회전
                    transform.Rotate(transform.up, deltaPos.x * -1f * rotSpeed);
                }
            }
        }
    }
	
---------------------------------------------------------------------------------------

CarManager 스크립트 수정

변수 추가

    public float relocationdDistance = 1f;

함수 수정

    void Update()
    {
        // 바닥 감지
        DetectedGround();

        // 만일, 인디케이터가 활성화 중이면서 화면 터치가 있는 상태라면
        if (indicator.activeInHierarchy && Input.touchCount > 0)
        {
            // 첫 번째 터치 상태를 가져옴
            Touch touch = Input.GetTouch(0);

            // 만일, 현재 클릭 or 터치한 오브젝트가 UI 오브젝트라면 Update 함수를 종료
            // EventSystem : UI 오브젝트만 해당
            if (EventSystem.current.currentSelectedGameObject)
            {
                return;
            }

            // 만일 터치가 시작된 상태라면 자동차를 인디케이터 와 동일한 곳에 생성
            // Began : 터치 하는 순간
            if (touch.phase == TouchPhase.Began)
            {
                // 만일 생성된 오브젝트가 없다면 프리팹을 씬에 생성 하고 placeObject 에 할당
                if (placedObject == null)
                {
                   placedObject = Instantiate(
                       myCar, indicator.transform.position, indicator.transform.rotation);
                }
                // 생성된 오브젝트가 있다면 그 오브젝트의 위치와 회전값을 변경
                else
                {
                    // 만일 생성된 오브젝트와 표식(인디케이터) 사이의 거리가
                    // 최고 이동범위 이상이라면
                    float distacne = Vector3.Distance(
                        placedObject.transform.position,
                        indicator.transform.position);

                    if (distacne > relocationdDistance)
                    {
                        placedObject.transform.SetPositionAndRotation(
                            indicator.transform.position, indicator.transform.rotation);

                    }
                }
            }
        }
    }
	
---------------------------------------------------------------------------------------

앱 실행중 입력 없을시 꺼짐 방지

AR Session Origin 에 NoneSleepMode 스크립트 생성

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class NoneSleepMode : MonoBehaviour
{
    private void Start()
    {
        // 앱 실행 중에는 절전 모드로 전환되지 않도록 설정
        Screen.sleepTimeout = SleepTimeout.NeverSleep;
    }
}

---------------------------------------------------------------------------------------







---------------------------------------------------------------------------------------

얼굴 인식 게임
씬 추가

XR -> AR Session, AR Session Origin 추가

AR Session Origin 에 AR Face Manager 추가
-> AR Session Origin 의 자식오브젝트 AR Camera -> AR Camera Manager 의
Facing Direction : User 로 변경(전면 카메라로 바꾸는것)

카페에서 에셋 다운 받기

Mask 이미지 Alpha is Transparency 체크
M_Mask 마테리얼 생성 -> Rendering Mode : Cutout -> Aldedo 에 마스크 이미지

3D 오브젝트 Quad 추가, MyMask 로 설정 -> 크기 0.18, 0.09, 1
M_Mask 마테리얼 적용

---------------------------------------------------------------------------------------

MyMask 오브젝트 선택 -> AR Face 컴포넌트 추가
MyMask 를 프리팹화 한뒤 하이어라키뷰 MyMask 제거

AR Session Origin 선택 -> AR Face Manager 의 Face Prefab 에 MyMask 참조

테스트 해보기
Build Settings 에서 기존 Car Scene 은 비활성 하고 Face Scene 추가 후 빌드
---------------------------------------------------------------------------------------

빈 오브젝트 생성 후 Mask 로 설정 -> 자식오브젝트로 MyMask 프리팹 넣은후
-> 위치값 Y축을 0.025 로 설정 -> Mask 오브젝트 를 프리팹화 한뒤 오브젝트 삭제

AR Session Origin 의 Face Prefab 을 Mask 프리팹으로 설정

---------------------------------------------------------------------------------------

UI -> Legacy -> Button -> 이름을 Button_Mask
-> 바텀 센터, 위치값 0, 150, 0
                   200, 100

Canvas 선택 -> Canvas Scaler -> UI Scale Mode : Scale With Screen Size
-> 1080 , 1920 으로 설정

---------------------------------------------------------------------------------------

Mask 이미지 복제후 이름을 Mask_s 로 설정 -> Texture Type : Sprite 로 설정(Ui 로 사용할거임)
Button_Mask 에 스프라이트 적용

---------------------------------------------------------------------------------------

Canvas 오브젝트에 UIManager 스크립트 생성

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.XR.ARFoundation;
using UnityEngine.XR.ARCore;
using UnityEngine.XR.ARSubsystems;

public class UIManager : MonoBehaviour
{
    public ARFaceManager faceManager;

    // 버튼을 눌렀을 때 실행될 함수
    public void ToggleMaskImage()
    {
        // 얼굴이 하나가 아닌 여러명일 수 있기에 foreach문 사용
        // faceManager 컴포넌트에서 현재 생성된 face 오브젝트를 모두 순회
        foreach (ARFace face in faceManager.trackables)
        {
            // 만일 face 오브젝트가 얼굴을 인식하고 있는 상태라면
            if (face.trackingState == TrackingState.Tracking)
            {
                // face 오브젝트 의 활성화 상태를 반대로 설정
                // activeSelf : 자기 자신의 활성화 여부(부모 오브젝트와 무관)
                // activeInHierarchy : 부모 오브젝트가 비활성화 되면 같이 비활성
                face.gameObject.SetActive(!face.gameObject.activeSelf);
            }
        }
    }
}

---------------------------------------------------------------------------------------

Canvas -> UIManager -> Face Manager 에 AR Session Origin 참조

Button_Mask 의 Onclicked() 에 Canvas 오브젝트 참조
-> UIManager 의 ToggleMaskImage() 적용

---------------------------------------------------------------------------------------

빈 오브젝트 생성 -> MyFaceModel 로 설정
-> Mesh Filter, Mesh Renderer, Mesh Collider 추가
-> AR Face Mesh Visulizer 추가

MyFaceModel 을 프리팹으로 저장후 오브젝트 제거

---------------------------------------------------------------------------------------

AR Session Origin
-> AR Face Manager 컴포넌트 의 Face Prefab 에 MyFaceModel 로 설정

---------------------------------------------------------------------------------------

마테리얼 생성
M_Face -> Rendering Mode : Cutout, Aldedo 이미지 원하는 이미지 삽입

---------------------------------------------------------------------------------------

얼굴에 동영상 재생 시키기

빈오브젝트 생성 -> FaceVideoPlayer -> Video Player 컴포넌트 추가
원하는 영상 을 Video Clip 에 넣고 Loop 활성화

프로젝트뷰 에 Render Texture 생성 -> FaceMovieRT 로 설정
-> FaceVideoPlayer 의 Target Texture 에 FaceMovieRT 넣기

마테리얼 생성
M_FaceMovie -> Aldedo 에 FaceMovieRT 넣기

MyFaceModel 프리팹의 마테리얼 을 M_FaceMovie 로 설정

---------------------------------------------------------------------------------------

UI -> Legacy -> Button -> Button_ImageMat, Button_MovieMat 생성

 Button_ImageMat
위치값 -300, 150, 0
       200, 100
텍스트 : IMAGE
폰트 사이즈 : 50

 Button_MovieMat
위치값  300, 150, 0
       200, 100
텍스트 : MOVIE
폰트 사이즈 : 50

---------------------------------------------------------------------------------------

UIManager 에 함수 추가

    // 마테리얼 변경 버튼 함수
    public void SwitchFaceMaterial(int num)
    {
        // FaceManager 컴포넌트에서 현재 생성된 face 오브젝트를 모두 순회
        foreach (ARFace face in faceManager.trackables)
        {
            // 만일 face 오브젝트가 얼굴을인식하고 있는 상태라면
            if (face.trackingState == TrackingState.Tracking)
            {
                // face 오브젝트의 MeshRenderer 컴포넌트에 접근
                MeshRenderer mr = face.GetComponent<MeshRenderer>();

                // 버튼에 설정된 번호 (이미지:0번, 영상:1번)에 해당하는 머테리얼로 변경
                mr.material = faceMats[num];
            }
        }
    }

---------------------------------------------------------------------------------------

Canvas -> UIManager 의 Face Mats 에 M_Face(이미지), M_FaceMovie(영상) 넣기

Button_ImageMat, Button_MovieMat 의 Onclicked() 에 각각 Canvas 참조
-> UIManager -> SwitchFaceMaterial() 참조
-> Button_ImageMat 에 0번, Button_MovieMat 에 1번 설정

---------------------------------------------------------------------------------------

 얼굴의 특정 위치 맞추기

빈 오브젝트 FindFaceElements > FindDetection 스크립트 생성 후 넣기

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.XR.ARFoundation;
using UnityEngine.XR.ARCore;
using Unity.Collections;
using UnityEngine.UI;


public class FindDetection : MonoBehaviour
{
    public GameObject smallCube;
    List<GameObject> faceCubes = new List<GameObject>();

    public Text vertexIndex;

    public ARFaceManager afm;
    private ARCoreFaceSubsystem subSys;

    // 특정 방식으로 설정할시 메모리 사용 최적화
    NativeArray<ARCoreFaceRegionData> regionData;

    void Start()
    {
        // 위치 표시를 위한 작은 큐브 3개를 생성
        for (int i = 0; i < 3; i++)
        {
            GameObject go = Instantiate(smallCube);
            faceCubes.Add(go);
            go.SetActive(false);
        }

        // AR Face Manager 가 얼굴을 인식할 때 실행할 함수를 연결
        // afm.facesChanged += OnDetectThreePoints;
        afm.facesChanged += OnDetectFaceAll;

        // AR Foundation의 XRFaceSubsystem 클래스 변수를
        // AR Core의 ARCoreFaceSubsystem 클래스 변수로 캐스팅
        subSys = (ARCoreFaceSubsystem)afm.subsystem;
    }
    void OnDetectFaceAll(ARFacesChangedEventArgs args)
    {
        // 얼굴을 인식했을 때에는
        if (args.updated.Count > 0)
        {
            // 텍스트 UI에 적힌 문자열 데이터를 정수형 데이터로 변환
            // 델리게이트에 메소드 넣어놓았고 델기게이트 호출은 다른쪽에서 호출함
            int num = int.Parse(vertexIndex.text);

            // 얼굴 정점 배열에서 지정한 인덱스에 해당하는 좌표를 가져옴
            // 총 468 개의 버텍스가 있음
            Vector3 vertPosition = args.updated[0].vertices[num];

            // 정점 좌표를 월드 좌표로 변환
            vertPosition = args.updated[0].transform.TransformPoint(vertPosition);

            // 준비된 큐브 하나를 활성화 하고, 정점 위치에 가져다 놓음
            faceCubes[0].SetActive(true);
            faceCubes[0].transform.position = vertPosition;
        }
        else if (args.removed.Count > 0)
        {
            faceCubes[0].SetActive(false);
        }
    }
    // facesChanged 델리게이트(Action)에 연결할 함수
    void OnDetectThreePoints(ARFacesChangedEventArgs args)
    {
        // 얼굴 인식 정보가 갱신된 것이 있다면
        if (args.updated.Count > 0)
        {
            // 인식된 얼굴에서 특정 위치를 가져옴
            subSys.GetRegionPoses(
                // update : 변경된것이 여러개일수 있어 배열
                args.updated[0].trackableId,
                // Persistent 방식으로 regionData 에 저장
                // Persistent : 가장 느린 할당이지만 애플리케이션 주기에 걸쳐 필요한만큼 오래 지속
                Allocator.Persistent, ref regionData);

            // 인식된 얼굴의 특정 위치(0: 코끝, 1:이마 좌측, 2: 이마 우측) 에 오브젝트 위치
            for (int i = 0; i < regionData.Length; i++)
            {
                faceCubes[i].transform.position = regionData[i].pose.position;
                faceCubes[i].transform.rotation = regionData[i].pose.rotation;
                faceCubes[i].SetActive(true);
            }
        }
        // 얼굴 인식 정보를 잃었다면
        else if (args.removed.Count > 0)       
        {
            // 오브젝트 비활성화
            for (int i = 0; i < regionData.Length; i++)
            {
                faceCubes[i].SetActive(false);
            }
        }
    }
}

---------------------------------------------------------------------------------------

UIManager 스크립트 수정

using 추가

using UnityEngine.UI;

변수 추가
    public Text indexText;

    int vertNum = 0;
    int vertCount = 468;

함수 추가
    private void Start()
    {
        // 최초의 인덱스 값을 0으로 초기화
        indexText.text = vertNum.ToString();
    }

    public void indexIncrease()
    {
        // vertNum의 값을 1 증가시키되 최대 인덱스를 넘치 않도록 함
        // Mathf.Min : 둘 중 더 작은 값을 반환
        vertNum = Mathf.Min(++vertNum, vertCount - 1);
        indexText.text = vertNum.ToString();
    }

    public void IndexDecrease()
    {
        // vertNum의 값을 1 감소 시키되 0 보다 작아지지 않도록 함
        // Mathf.Max : 둘 중 더 큰 값을 반환
        vertNum = Mathf.Max(--vertNum, 0);
        indexText.text = vertNum.ToString();
    }

---------------------------------------------------------------------------------------

FindFaceElements 오브젝트 선택
Afm 에 AR Session Origin 오브젝트 참조

3D오브젝트 큐브 생성 -> SmallCube 로 설정 -> 크기 0.02 설정후 프리팹화
-> FindFaceElements 의 Small Cube 에 연결

---------------------------------------------------------------------------------------

UI -> Legacy -> Text 이름 Vertext_Text
-> 바텀 센터
-> 위치값 0 300 0
		 150 80
-> 텍스트 : 0
-> 폰트 사이즈 : 60
-> 색상 노란색


UI -> Legacy -> Button 이름 Decrease_Button
-> 바텀 센터
-> 위치값 -200 300 0
			80 80
자식 텍스트 : -
폰트 사이즈 : 70


Decrease_Button 복제 Increase_Button


Increase_Button
위치값 200 300 0
		80 80
자식 텍스트 : +

---------------------------------------------------------------------------------------

FindFaceElements -> FindDetection -> Vertext Index 에 Vertext_Text 참조

Canvas -> UI Manager -> Index Text 에 Vertext_Text 참조

Decrease_Button, Increase_Button 의 Onclicked() 에 Canvas 참조
각각 IndexDecrease(), IndexIncrease() 실행 참조
