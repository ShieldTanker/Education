
멀티플레이 구현

FPS게임 만든것을 활용(만든것에 차이가 있을수 있기에 강사님이 만들어둔 것 으로 사용)
폴더 이름을 FPS Game Multiplay 로 설정

포톤 엔진 사이트 들어가서 로그인

포톤 퓨전1을 사용

포톤 퓨전 1.1.4 버전사용(카페에서 다운로드)

(SDK 에서 다른거 받기 가능)
다른버전 받기 : SDK > FUSION > Unity > FUSION FUSION 선택
> SDK 를 다운로드

카페에서 다운받은 Photon-Fusion-1.1.4-F-609.unitypackage 설치

설치되면 창 하나 뜨는데 나중에 설정할 것 이니 닫아두기

Window > PackageManager > + 버튼 > Add Package From Git URL
> com.unity.nuget.mono-cecil 로 추가

///////////////////////////////////////////////////////////////////////////////////////////////////////////////

포톤 사이트 들어가서 관리화면으로 이동
새 어플리케이션 > Photon 종류 : Fusion, Select SDK Version : Fusion 1
이름 > FPS Game Multiplay

만들어진 어플리케이션 상단 App ID 를 복사
> 상단에 새로생긴 Fusion탭 > Fusion Hub
> Fusion App id : 칸에 붙여넣고 엔터

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

로그인 씬 열기

Input_ID 복제 > Input_RoomName 로 변경
Input_RoomName Y값을 70 으로 변경

Input_RoomName 안의 Text_ID 와 InputField_ID 를 다 RoomName 형식으로 변경

Text_RoomName 과 InputField_RoomName 의 텍스트 내용을 변경
(방 이름, 방 이름 변경)


빈 오브젝트 생성 > PlayerData > PlayerData 스크립트 생성

스크립트 수정

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerData : MonoBehaviour
{
    // 게임 플레이 하는동안 계속 기억해야할 정보
    public string UserId { get; set; }

    private void Start()
    {
        // 스타트 는 오브젝트가 생성될때 실행됨
        // 이미 생성된 오브젝트는 다른씬에서 다시와도 스타트 실행 안함
        int count = FindObjectsOfType<PlayerData>().Length;
        if (count > 1)
        {
            Destroy(gameObject);
            return;
        }

        DontDestroyOnLoad(gameObject);
    }
}

//////////////////////////////////////////////////////////////////////////////////////////

PlayerData 를 프리팹으로 만든뒤 하이어라키 에서 제거

빈 오브젝트 생성 > NetworkRunner > NetworkRunner 컴포넌트 추가(포톤 으로 추가해서 있는것)

NetworkRunner 를 프리팹으로 저장 후 하이어라키 의 오브젝트 제거

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

LoginManager 스크립트 수정

using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;
using Fusion;

public class LoginManager : MonoBehaviour
{
    [SerializeField] private NetworkRunner _networkRunnerPrefab = null;
    [SerializeField] private PlayerData _playerDataPrefab = null;
    [SerializeField] private InputField _roomName = null;
    [SerializeField] private string _gameSceneName = null;

    // 오브젝트가 생성되고 그 객체를 저장할 변수
    private NetworkRunner _runnerInstance = null;

    // 유저 아이디 변수
    public InputField id;

    // 유저 패스워드 변수
    public InputField password;

    // 검사 텍스트 변수
    public Text notify;

    private void Start()
    {
        // 검사 텍스트 창을 비움
        notify.text = "";
    }

    public void StartSharedSession()
    {
        string roomName = string.IsNullOrEmpty(_roomName.text) ? "BasicRoom" : _roomName.text;

        SetPlayerData();
        StartGame(GameMode.Shared, roomName, _gameSceneName);
    }

    private void SetPlayerData()
    {
        PlayerData playerData = FindObjectOfType<PlayerData>();
        if (playerData == null)
        {
            playerData = Instantiate(_playerDataPrefab);
        }

        playerData.UserId = id.text;
    }

    private async void StartGame(GameMode mode, string roomName, string sceneName)
    {
        _runnerInstance = FindObjectOfType<NetworkRunner>();
        if (_runnerInstance == null)
        {
            _runnerInstance = Instantiate(_networkRunnerPrefab);
        }
        _runnerInstance.ProvideInput = true;

        var startGameargs = new StartGameArgs()
        {
            GameMode = mode,
            SessionName = roomName,
        };

        await _runnerInstance.StartGame(startGameargs);

        _runnerInstance.SetActiveScene(sceneName);
    }

    // 아이디와 패스워드 저장 함수
    public void SaveUserData()
    {
        // 만일 입력 검사에 문제가 있으면 함수를 종료
        if (!CheckInput(id.text, password.text))
            return;

        // 만일 시스템에 저장돼 있는 아이디가 존재하지 않는다면
        if (!PlayerPrefs.HasKey(id.text))
        {
            // 사용자의 아이디는 키(key)로 패스워드를 값(value)으로 설정해 저장
            PlayerPrefs.SetString(id.text, password.text);
            notify.text = "아이디 생성이 완료됐습니다.";
        }
        // 그렇지 않으면, 이미 존재한다는 메시지를 출력
        else
        {
            notify.text = "이미 존재하는 아이디입니다.";
        }
    }

    // 로그인 함수
    public void CheckUserData()
    {
        // 만일 입력 검사에 문제가 있으면 함수를 종료
        if (!CheckInput(id.text, password.text))
            return;

        // 사용자가 입력한 아이디를 키로 사용해 시스템에 저장된 값을 불러옴
        string pass = PlayerPrefs.GetString(id.text);

        // 만일, 사용자가 입력한 패스워드와 시스템에서 불러온 값을 비교해서 동일하다면
        if (password.text == pass)
        {
            // 다음 씬(1번 씬)을 로드
            // SceneManager.LoadScene(1);
            StartSharedSession();
        }
        // 그렇지 않고 두 데이터의 값이 다르면, 유저 정보 불일치 메시지를 남김
        else
        {
            notify.text = "입력하신 아이디와 패스워드가 일치하지 않습니다.";
        }
    }

    // 입력 완료 확인 함수
    bool CheckInput(string id, string pwd)
    {
        // 만일, 입력란이 하나라도 비어 있으면 유저 정보 입력을 요구
        if (id == "" || pwd == "")
        {
            notify.text = "아이디 또는 패스워드를 입력해주세요.";
            return false;
        }
        // 입력이 비어 있지 않으면 true를 반환
        else
        {
            return true;
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////

LoginManager 오브젝트 참조연결

Network Runner Prefab 과 Player Data Prefab 에 각각 프리팹 참조
RoomName 에 Input_RoomName 의 InputField_RoomName
Game Scene Name 에 MainScene

////////////////////////////////////////////////////////////////////////////////////////

서버(Server)   : 포톤의 서버를 이용

호스트(Host)   : 플레이어 중 하나를 서버로 둠

쉐어드(Shared) : 포톤서버이긴 하나 최소한의 정보만 가지고 플레이어가 움직이면
                움직인 플레이어가 다른 플레이어에게 위치값을 넘김
				(플레이어가 나갈시 나갔다는 정보만 전송하면 됨)
				
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

다른 플레이어 보이게 수정
MainScene 열기

플레이어 오브젝트에 PlayerDataNetworked 스크립트 생성

스크립트 작성

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Fusion;

public class PlayerDataNetworked : NetworkBehaviour
{
    public string UserId { get; private set; }

    public override void Spawned()
    {// 스타트 와 비슷함, 오브젝트가 스폰될때 호출됨
        if (Object.HasStateAuthority)
        {// Object : 네트워크용 오브젝트
         // HasStateAuthority : 상태권한
            UserId = FindObjectOfType<PlayerData>().UserId;
        }
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GameManager 오브젝트에 NetworkObject 컴포넌트 추가
NetworkObject : 같은 세션에서 서로 공유 가능하게 만듬

GameManager 스크립트 수정

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;
using Fusion;

public class GameManager : NetworkBehaviour
{
    // 싱글톤 변수
    public static GameManager gm;

    private void Awake()
    {
        if (gm == null)
        {
            gm = this;
        }
    }

    // 게임 상태 상수
    public enum GameState
    {
        Ready,
        Run,
        Pause,
        GameOver,
    }

    // 현재의 게임 상태 변수
    // [Networked] : 같은 세션에서 고유할수 있게 만듬(단 사용하려면 속성으로 사용해야함)
    [Networked] public GameState gState { get; set; }

    // 게임 상태 UI 오브젝트 변수
    public GameObject gameLabel;

    // 게임 상태 UI 텍스트 컴포넌트 변수
    Text gameText;

    // PlayerMove 클래스 변수
    public PlayerMove player;

    // 옵션 화면 UI 오브젝트 변수
    public GameObject gameOption;

    // Start() 를 Spawned() 로 바꿈
    public override void Spawned()
    {
        // 초기 게임 상태를 준비 상태로 설정
        gState = GameState.Ready;

        // 게임 상태 UI 오브젝트에서 Text 컴포넌트를 가져옴
        gameText = gameLabel.GetComponent<Text>();

        // 상태 텍스트의 내용을 'Ready...'로 설정
        gameText.text = "Ready...";

        // 상태 텍스트의 색상을 주황색으로 설정
        gameText.color = new Color32(255, 185, 0, 255);

        // 게임 준비 -> 게임 중 상태로 전환
        StartCoroutine(ReadyToStart());
    }

    // 수신하고 처리 하는 프레임에 처리 됨
    public override void FixedUpdateNetwork()
    {
        // 만일, 플레이어가 null 이 아니고 hp가 0이하라면
        if (player != null && player.hp <= 0)
        {
            // 플레이어의 애니메이션을 멈춤
            player.GetComponentInChildren<Animator>().SetFloat("MoveMotion", 0f);

            // 상태 텍스트를 활성화
            gameLabel.SetActive(true);

            // 상태 텍스트의 내용을 'GameOver'로 설정
            gameText.text = "Game Over";

            // 상태 텍스트의 색상을 붉은색으로 설정
            gameText.color = new Color32(255, 0, 0, 255);

            // 상태 텍스트의 자식 오브젝트의 트랜스폼 컴포넌트를 가져옴
            Transform buttons = gameText.transform.GetChild(0);

            // 버튼 오브젝트를 활성화
            buttons.gameObject.SetActive(true);

            // 상태를 '게임 오버' 상태로 변경
            gState = GameState.GameOver;
        }
    }

    IEnumerator ReadyToStart()
    {
        // 2초간 대기
        yield return new WaitForSeconds(2f);

        // 상태 텍스트의 내용을 'Go!'로 변경
        gameText.text = "Go!";

        // 0.5초간 대기
        yield return new WaitForSeconds(0.5f);

        // 상태 텍스트를 비활성화
        gameLabel.SetActive(false);

        // 상태를 '게임 중' 상태로 변경
        gState = GameState.Run;
    }

    // 옵션 화면 켜기
    public void OpenOptionWindow()
    {
        // 옵션 창을 활성화
        gameOption.SetActive(true);
        // 게임 속도를 0배속으로 전환
        Time.timeScale = 0f;
        // 게임 상태를 일시 정지 상태로 변경
        gState = GameState.Pause;
    }

    // 계속하기 옵션
    public void CloseOptionWindow()
    {
        // 옵션 창을 비활성화
        gameOption.SetActive(false);
        // 게임 속도를 1배속으로 전환
        Time.timeScale = 1f;
        // 게임 상태를 게임 중 상태로 변경
        gState = GameState.Run;
    }

    // 다시하기 옵션
    public void RestartGame()
    {
        // 게임 속도를 1배속으로 전환
        Time.timeScale = 1f;
        // 현재 씬 번호를 다시 로드
        //SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);

        // 로딩 화면 씬을 로드
        SceneManager.LoadScene(1);
    }

    // 게임 종료 옵션
    public void QuitGame()
    {
        // 애플리케이션을 종료
        Application.Quit();
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////

Player오브젝트에 NetworkObject 추가

PlayerMove, PlayerRotate, PlayerFire 의 Update() 를
> public override void FixedUpdateNetwork() 로 교체

PlayerMove, PlayerFire 의 Start() 를
> public override void Spawned() 로 교체

////////////////////////////////////////////////////////////////////////////////////////////////

게임 중간에 스폰되고 나가게 처리

Player 오브젝트를 프리팹으로 저장

하이어라키뷰 에 있는 Player 삭제

프리팹 으로 만드면 단점이 참조연결이 전부 끊겨버림
GameManager 로 참조연결 받아오기로 하기


GameManager 스크립트 에 변수 추가

    public Slider hpSlider;
    public GameObject hitEffect;

    public GameObject bulletEffect;
    public Text wModeText;
	
	public GameObject weapon01;
    public GameObject weapon02;
    public GameObject crosshair01;
    public GameObject crosshair02;
    public GameObject weapon01_R;
    public GameObject weapon02_R;
    public GameObject crosshair02_zoom;
	
PlayerMove 스크립트 수정

변수 추가

    public Transform camPosition;

// Start() 를 Spawned() 로 변경
    public override void Spawned()
    {
        // 캐릭터 컨트롤러 컴포넌트 받아오기
        cc = GetComponent<CharacterController>();

        // 애니메이터 받아오기
        anim = GetComponentInChildren<Animator>();
		
		if (Object.HasInputAuthority)
        {// 네트워크 오브젝트가 제어권한이 있으면
            // 게임매니저 의 플레이어 에 자신 넣기
			GameManager.gm.player = this;
			// 게임매니저에서 hp슬라이더 참조 받기
            hpSlider = GameManager.gm.hpSlider;

            // 메인 카메라의 CamFollow 컴포넌트를 가져옴
            CamFollow cf = Camera.main.GetComponent<CamFollow>();
            cf.target = camPosition;
        }
		
		// 게임 매니저에서 히트 이펙트 불러오기
        hitEffect = GameManager.gm.hitEffect;
    }
	

public override void FixedUpdateNetwork() 가장 하단 슬라이더 부분
	    
		if (hpSlider != null)
        {
            // 현재 플레이어 hp(%)를 hp 슬라이더의 value에 반영
            hpSlider.value = (float)hp / maxHp;
        }
	
Player 프리팹에 Cam Position 참조연결 에 Player 의 자식오브젝트
> CamPosition 연결

	
PlayerFire 스크립트 수정

    public override void Spawned()
    {
	    // 게임매니저에서 참조 받아오기
	    wModeText = GameManager.gm.wModeText;
        bulletEffect = GameManager.gm.bulletEffect;
        weapon01 = GameManager.gm.weapon01;
        weapon02 = GameManager.gm.weapon02;
        crosshair01 = GameManager.gm.crosshair01;
        crosshair02 = GameManager.gm.crosshair02;
        weapon01_R = GameManager.gm.weapon01_R;
        weapon02_R = GameManager.gm.weapon02_R;
        crosshair02_zoom = GameManager.gm.crosshair02_zoom;
		
        // 피격 이펙트 오브젝트에서 파티클 시스템 컴포넌트 가져오기
        ps = bulletEffect.GetComponent<ParticleSystem>();

        // 애니메이터 컴포넌트 가져오기
        anim = GetComponentInChildren<Animator>();

        // 무기 초기 모드를 노멀 모드로 설정
        wMode = WeaponMode.Normal;
    }
	
	
CameraFollow 스크립트 수정
    
	private void Update()
    {
        if (target != null)
        {
            // 카메라의 위치를 목표 트랜스폼의 위치에 일치시킴
            transform.position = target.position;
        }
    }
	
/////////////////////////////////////////////////////////////////////////////////////////////////////////

플레이어 생성 위치 조정

빈 오브젝트 생성 후 PlayerSpawnPoints 로 설정
자식 오브젝트로 Point1, 2, 3, 4 생성

각각 X축 -5, 0, 5, 10 ,Y축은 1 로 설정


상단 Fusion > Network Project Config

Object Settings
> Scene Load Spawn Mode : Allowed 로 변경

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Player 오브젝트 CharacterController 를 네트워크용 으로 사용할 컴포넌트 추가

Player 프리팹에 Network Character Controller ProtoType 컴포넌트 추가
Player 프리팹에 빈오브젝트를 자식오브젝트로 생성 > Interpolation Target 로 이름

Network Character Controller ProtoType 컴포넌트 의
Interpolation Target 에 연결

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

빈 오브젝트 생성 > Spawner 로 설정
NetworkObject 컴포넌트 추가

PlayerSpawner 스크립트 생성

스크립트 작성

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Fusion;

public class PlayerSpawner : SimulationBehaviour, ISpawned
{
    public NetworkPrefabRef playerNetworkPrefab;
    public Transform[] spawnPoints;

    // 각 프로그램 마다 씬 올때 스폰됨
    // 해당 씬이 불러와질때 세션에 생성되는 자신 오브젝트 정보를 매개변수로 사용
    public void Spawned()
    {// 세션에 생성되는 오브젝트.자신 오브젝트
        SpawnPlayer(Runner.LocalPlayer);
    }

    public void SpawnPlayer(PlayerRef player)
    { // 자신 오브젝트 순서 % 스폰포인트 배열 크기(자신 오브젝트 순서는 세션에 있는 사람수 만큼 카운트 됨)
        int index = player % spawnPoints.Length;
        var spawnPosition = spawnPoints[index].position;

        // 생성 시킬때 인스턴시에이트 가 아닌 Runner.Spawn() 으로 해야함
        var playerObject = Runner.Spawn(
            playerNetworkPrefab, spawnPosition, Quaternion.identity, player);
        //  생성할 프리팹, 생성할 위치, 회전값, 자신오브젝트 정보

        // 플레이어 오브젝트 설정 (세션에 생성된 자신오브젝트 정보, 생성된 오브젝트)
        Runner.SetPlayerObject(player, playerObject);
    }
}


Spawner 에 참조 연결
playerNetworkPrefab 에 Player 프리팹
SpawnPoints 에 point1~4 연결


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

적 오브젝트 의 플레이어 탐지

GameManager 스크립트 수정

변수 추가
	public List<GameObject> players;


EnemyFSM 스크립트 수정


        
변수 추가

    // 가장 가까운 플레이어
    GameObject nearPlayer = null;

    void Idle()
    {
        // 만일, 아무 플레이어와 거리가 액션 범위 이내라면 Move 상태로 전환
        foreach (var player in GameManager.gm.players)
        {
            if (Vector3.Distance(transform.position, player.transform.position) < findDistance)
            {
                m_State = EnemyState.Move;
                print("상태 전환: Idle -> Move");

                // 이동 애니메이션으로 전환
                anim.SetTrigger("IdleToMove");
            }
        }
    }

    void Move()
    {
        // 만일, 현재 위치가 초기 위치에서 이동 가능 범위를 넘어간다면
        if (Vector3.Distance(transform.position, originPos) > moveDistance)
        {
            // 현재 상태를 복귀(Return)로 전환
            m_State = EnemyState.Return;
            print("상태 전환 : Move -> Return");

            return;
        }

        // 플레이어 리스트중 가장 가까운 플레이어 검색
        float minDistance = float.MaxValue;
        foreach (var player in GameManager.gm.players)
        {
            float distance = Vector3.Distance(transform.position, player.transform.position);
            if (minDistance > distance)
            {
                minDistance = distance;
                nearPlayer = player;
            }
        }

        // 만일, 플레이어와의 거리가 공격 범위 밖이라면 플레이어를 향해 이동
        if (minDistance > attackDistance)
        {
            // 내비게이션으로 접근하는 최소 거리를 공격 가능 거리로 설정
            smith.stoppingDistance = attackDistance;

            // 내비게이션의 목적지를 플레이어의 위치로 설정
            smith.destination = nearPlayer.transform.position;
        }
        // 그렇지 않다면, 현재 상태를 공격(Attack)으로 전환
        else
        {
            // 내비게이션 에이전트의 이동을 멈추고 경로를 초기화
            smith.isStopped = true;
            smith.ResetPath();

            m_State = EnemyState.Attack;
            print("상태 전환: Move -> Attack");

            // 누적 시간을 공격 딜레이 시간만큼 미리 진행시켜 놓음
            currentTime = attackDelay;

            // 공격 대기 애니메이션 플레이
            anim.SetTrigger("MoveToAttackDelay");
        }
    }

    void Attack()
    {
        // 만일, 플레이어가 공격 범위 이내에 있다면 플레이어를 공격
        if (Vector3.Distance(transform.position, nearPlayer.transform.position) < attackDistance)
        {
            // 일정한 시간마다 플레이어를 공격
            currentTime += Time.deltaTime;
            if (currentTime > attackDelay)
            {
                // player.GetComponent<PlayerMove>().DamageAction(attackPower);
                print("공격");
                currentTime = 0;

                // 공격 애니메이션 플레이
                anim.SetTrigger("StartAttack");
            }
        }
        // 그렇지 않다면, 현재상태를 이동으로 전환(재추격 실시)
        else
        {
            m_State = EnemyState.Move;
            print("상태 전환 : Attack -> Move");
            currentTime = 0;

            // 이동 애니메이션 플레이
            anim.SetTrigger("AttackToMove");
        }
    }

    // 플레이어의 스크립트의 데미지 처리 함수를 실행
    public void AttackAction()
    {
        nearPlayer.GetComponent<PlayerMove>().DamageAction(attackPower);
    }


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

플레이어가 맞았을때 다른 플레이어 에게 hitEffect 보이지 않게 처리

PlayerMove 스크립트 수정

    // 플레이어의 피격 함수
    public void DamageAction(int damage)
    {
        // 에너미의 공격력만큼 플레이어의 체력을 깎음
        hp -= damage;

        // 만일, 플레이어의 체력이 0보다 크고, 네트워크 입력권한이 있으면 피격 효과를 출력
        if (Object.HasInputAuthority && hp > 0)
        {
            // 피격 이펙트 코루틴을 시작
            StartCoroutine(PlayHitEffect());
        }
    }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

스폰시 리스트에 플레이어 추가
GameManager 스크립트 수정

메소드 추가

    public void AddPlayer(GameObject obj)
    {
        players.Add(obj);
    }

    public void RemovePlayer(GameObject obj)
    {
        players.Remove(obj);
    }


PlayerDataNetworked 스크립트 수정

    public override void Spawned()
    {// 스타트 와 비슷함, 오브젝트가 스폰될때 호출됨
        if (Object.HasStateAuthority)
        {// Object : 네트워크용 오브젝트
         // HasStateAuthority : 상태권한 이 있는지
            UserId = FindObjectOfType<PlayerData>().UserId;
        }

        GameManager.gm.AddPlayer(gameObject);
    }

// 메소드 추가

    public override void Despawned(NetworkRunner runner, bool hasState)
    {
        GameManager.gm.RemovePlayer(gameObject);
    }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CamFollow 스크립트 수정
    
	private void Update()
    {
        if (target != null)
        {// 타겟이 null 이 아닐때
            // 카메라의 위치를 목표 트랜스폼의 위치에 일치시킴
            transform.position = target.position;
        }
    }
	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

네트워크 입력 관리 하는 구조체 만들기
새 스크립트 생성 > NetworkInputData 

스크립트 작성

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Fusion;

enum PlayerButtons
{
    Jump = 0,
}

public struct NetworkInputData : INetworkInput
{// 입력권한이 있는 오브젝트를 가지고 다른쪽에 정보를 전파 
    public Vector3 dir;

    // 버튼이 눌려있다 안눌려있다 를 확인할때 사용
    public NetworkButtons Buttons;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Network Character Controller ProtoType 값 수정
중력(Gravity) : -20
점프(Jump Impulse) : 10
최대속력(Max Speed) : 7

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

NetworkRunner 프리팹에 새 스크립트 추가 > LocalInputPoller 로 이름 설정

LocalInputPoller 스크립트 작성

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Fusion;
using Fusion.Sockets;

public class LocalInputPoller : MonoBehaviour, INetworkRunnerCallbacks
{

	// 나머지 인터페이스 메소드 구현은 { } 로 만 해놓기

    // 입력이 있을때 자동으로 호출
    public void OnInput(NetworkRunner runner, NetworkInput input)
    {
        // NetworkInputData : 우리가 만든 구조체
        NetworkInputData localInput = new NetworkInputData();

        float h = Input.GetAxisRaw("Horizontal");
        float v = Input.GetAxisRaw("Vertical");

        Vector3 dir = new Vector3(h, 0, v);
        dir = dir.normalized;  // 대각선 입력을 정규화
        dir = Camera.main.transform.TransformDirection(dir);  // 메인카메라가 바라보는 방향을 기준으로 새로 계산

        localInput.dir = dir; // 구조체에 dir 값 넣기

        // 버튼 세팅(열거형 Jump = 0, Input.GetButton("Jump") = bool)
        localInput.Buttons.Set(PlayerButtons.Jump, Input.GetButton("Jump"));

        input.Set(localInput);
    }
	// 나머지 인터페이스 메소드 구현은 { } 로만 해놓기
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

PlayerMove 스크립트 수정

변수 추가
    // 네트워크용 캐릭터 컨트롤러 변수
    NetworkCharacterControllerPrototype netCC;

    // 이전 버튼입력 정보를 담을 변수
    [Networked] private NetworkButtons _buttonsPrevious { get; set; }
	
	
	
Spawned() 메소드 수정
	
	    public override void Spawned()
    {
        // 캐릭터 컨트롤러 컴포넌트 받아오기
        netCC = GetComponent<NetworkCharacterControllerPrototype>();  // cc 삭제하고 Net CC Proto 로 바꿈
		
		// 코드 생략
    }



FixedUpdateNetwork() 수정

    public override void FixedUpdateNetwork()
    {
        // 게임 상태가 '게임 중' 상태일 때만 조작할 수 있게 함
        if (GameManager.gm.gState != GameManager.GameState.Run)
            return;

        if (GetInput(out NetworkInputData data))  // OnInput 에서 송신(입력)한 것을 받아오고 data 에 반환
        {
            // FixedUpdateNetwork() 는 FixedDeltaTime 이 아닌 Runner.DeltaTime 을 사용
            netCC.Move(data.dir * moveSpeed * Runner.DeltaTime);

            if (data.Buttons.WasPressed(_buttonsPrevious, PlayerButtons.Jump))
            {// data 현재 버튼이 Jump 번째 이전버튼 과 다르면
                netCC.Jump(); // 공중에 있으면 점프안되는것고 구현 되어있음
            }

            _buttonsPrevious = data.Buttons;
        }
        // 이동 블랜딩 트리를 호출하고 벡터의 크기 값을 넘겨줌
        anim.SetFloat("MoveMotion", netCC.Velocity.magnitude);

        if (hpSlider != null)
        {
            // 현재 플레이어 hp(%)를 hp 슬라이더의 value에 반영
            hpSlider.value = (float)hp / maxHp;
        }

아래코드는 사용 안하니 주석 처리 혹은 삭제

/*        // 사용자의 입력을 받음
        float h = Input.GetAxis("Horizontal");
        float v = Input.GetAxis("Vertical");

        // 이동 방향을 설정
        Vector3 dir = new Vector3(h, 0, v);
        dir = dir.normalized;

        // 메인 카메라를 기준으로 방향을 변환
        dir = Camera.main.transform.TransformDirection(dir);

        // 만일, 점프 중이었고, 다시 바닥에 착지했다면
        if (isJumping && cc.collisionFlags == CollisionFlags.Below)
        {
            // 점프 전 상태로 초기화
            isJumping = false;

            // 캐릭터 수직 속도를 0으로 만듦
            yVelocity = 0;
        }

        // 만일 키보드 Spacebar 키를 입력했다면
        if (Input.GetButtonDown("Jump") && !isJumping)
        {
            // 캐릭터 수직 속도에 점프력을 적용
            yVelocity = jumpPower;
            isJumping = true;
        }

        // 캐릭터 수직 속도에 중력 값을 적용
        yVelocity += gravity * Time.deltaTime;
        dir.y = yVelocity;

        // 이동 속도에 맞춰 이동
        cc.Move(dir * moveSpeed * Time.deltaTime);
*/
    }
	
	
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

플레이어 회전시 다른플레이어 에게 보이게

NetworkInputData 스크립트 변수 추가

	// 마우스 회전값 변수
	public float mx;


PlayerRotate 스크팁트 수정

    private void Update()
    {
        // 마우스 좌우 입력을 받음
        float mouse_X = Input.GetAxis("Mouse X");

        // 회전 값 변수에 마우스 입력 값만큼 미리 누적시킴
        mx += mouse_X * rotSpeed * Time.deltaTime;
    }

    // 수신하고 처리하는 프레임에 작동
    public override void FixedUpdateNetwork()
    {
        // 게임 상태가 '게임 중' 상태일 때만 조작할 수 있게 함
        if (GameManager.gm.gState != GameManager.GameState.Run)
            return;

        if (GetInput(out NetworkInputData data))
        {
            // 회전 방향으로 물체를 회전시킴
            transform.eulerAngles = new Vector3(0, data.mx, 0);
        }
    }
	
GameManager 변수 추가
	public List<GameObject> players;
	

PlayerMove 스크립트 수정

    public override void Spawned()
    {
        // 캐릭터 컨트롤러 컴포넌트 받아오기
        netCC = GetComponent<NetworkCharacterControllerPrototype>();  // cc 삭제하고 Net CC Proto 로 바꿈

        // 애니메이터 받아오기
        anim = GetComponentInChildren<Animator>();

        if (Object.HasInputAuthority)
        {// 네트워크 오브젝트가 제어권한이 있는지
            GameManager.gm.player = this;
            hpSlider = GameManager.gm.hpSlider;

            // 메인 카메라의 CamFollow 컴포넌트를 가져옴
            CamFollow cf = Camera.main.GetComponent<CamFollow>();
            cf.target = camPosition;

            // PlayerMove 를 가지는 오브젝트의 PlayerRotate 컴포넌트 를 넘겨줌
            GameManager.gm.pr = GetComponent<PlayerRotate>();
        }

        hitEffect = GameManager.gm.hitEffect;
    }


LocalInputPoller 스크립트 수정

    // 입력이 있을때 자동으로 호출
    public void OnInput(NetworkRunner runner, NetworkInput input)
    {
        if (GameManager.gm == null || GameManager.gm.pr == null)
            return;

        // NetworkInputData : 우리가 만든 구조체
        NetworkInputData localInput = new NetworkInputData();

        float h = Input.GetAxisRaw("Horizontal");
        float v = Input.GetAxisRaw("Vertical");

        Vector3 dir = new Vector3(h, 0, v);
        dir = dir.normalized;  // 대각선 입력을 정규화
        dir = Camera.main.transform.TransformDirection(dir);  // 메인카메라가 바라보는 방향을 기준으로 새로 계산

        localInput.dir = dir; // 구조체에 dir 값 넣기

        // 버튼 세팅(열거형 Jump = 0, Input.GetButton("Jump") = bool)
        localInput.Buttons.Set(PlayerButtons.Jump, Input.GetButton("Jump"));
        // GetMouseButton()은 Update() 에서 사용하는거라 여기에 쓰면 안됨
        localInput.Buttons.Set(PlayerButtons.Fire0, Input.GetMouseButton(0));
        localInput.Buttons.Set(PlayerButtons.Fire1, Input.GetMouseButton(1));

        localInput.mx = GameManager.gm.pr.mx;

        // 매개변수가 참조형이라서 값이 변함
        input.Set(localInput);
    }

