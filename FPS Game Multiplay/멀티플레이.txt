
멀티플레이 구현

FPS게임 만든것을 활용(만든것에 차이가 있을수 있기에 강사님이 만들어둔 것 으로 사용)
폴더 이름을 FPS Game Multiplay 로 설정

포톤 엔진 사이트 들어가서 로그인

포톤 퓨전1을 사용

포톤 퓨전 1.1.4 버전사용(카페에서 다운로드)

(SDK 에서 다른거 받기 가능)
다른버전 받기 : SDK > FUSION > Unity > FUSION FUSION 선택
> SDK 를 다운로드

카페에서 다운받은 Photon-Fusion-1.1.4-F-609.unitypackage 설치

설치되면 창 하나 뜨는데 나중에 설정할 것 이니 닫아두기

Window > PackageManager > + 버튼 > Add Package From Git URL
> com.unity.nuget.mono-cecil 로 추가

///////////////////////////////////////////////////////////////////////////////////////////////////////////////

포톤 사이트 들어가서 관리화면으로 이동
새 어플리케이션 > Photon 종류 : Fusion, Select SDK Version : Fusion 1
이름 > FPS Game Multiplay

만들어진 어플리케이션 상단 App ID 를 복사
> 상단에 새로생긴 Fusion탭 > Fusion Hub
> Fusion App id : 칸에 붙여넣고 엔터

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

로그인 씬 열기

Input_ID 복제 > Input_RoomName 로 변경
Input_RoomName Y값을 70 으로 변경

Input_RoomName 안의 Text_ID 와 InputField_ID 를 다 RoomName 형식으로 변경

Text_RoomName 과 InputField_RoomName 의 텍스트 내용을 변경
(방 이름, 방 이름 변경)


빈 오브젝트 생성 > PlayerData > PlayerData 스크립트 생성

스크립트 수정

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerData : MonoBehaviour
{
    // 게임 플레이 하는동안 계속 기억해야할 정보
    public string UserId { get; set; }

    private void Start()
    {
        // 스타트 는 오브젝트가 생성될때 실행됨
        // 이미 생성된 오브젝트는 다른씬에서 다시와도 스타트 실행 안함
        int count = FindObjectsOfType<PlayerData>().Length;
        if (count > 1)
        {
            Destroy(gameObject);
            return;
        }

        DontDestroyOnLoad(gameObject);
    }
}

//////////////////////////////////////////////////////////////////////////////////////////

PlayerData 를 프리팹으로 만든뒤 하이어라키 에서 제거

빈 오브젝트 생성 > NetworkRunner > NetworkRunner 컴포넌트 추가(포톤 으로 추가해서 있는것)

NetworkRunner 를 프리팹으로 저장 후 하이어라키 의 오브젝트 제거

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

LoginManager 스크립트 수정

using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;
using Fusion;

public class LoginManager : MonoBehaviour
{
    [SerializeField] private NetworkRunner _networkRunnerPrefab = null;
    [SerializeField] private PlayerData _playerDataPrefab = null;
    [SerializeField] private InputField _roomName = null;
    [SerializeField] private string _gameSceneName = null;

    // 오브젝트가 생성되고 그 객체를 저장할 변수
    private NetworkRunner _runnerInstance = null;

    // 유저 아이디 변수
    public InputField id;

    // 유저 패스워드 변수
    public InputField password;

    // 검사 텍스트 변수
    public Text notify;

    private void Start()
    {
        // 검사 텍스트 창을 비움
        notify.text = "";
    }

    public void StartSharedSession()
    {
        string roomName = string.IsNullOrEmpty(_roomName.text) ? "BasicRoom" : _roomName.text;

        SetPlayerData();
        StartGame(GameMode.Shared, roomName, _gameSceneName);
    }

    private void SetPlayerData()
    {
        PlayerData playerData = FindObjectOfType<PlayerData>();
        if (playerData == null)
        {
            playerData = Instantiate(_playerDataPrefab);
        }

        playerData.UserId = id.text;
    }

    private async void StartGame(GameMode mode, string roomName, string sceneName)
    {
        _runnerInstance = FindObjectOfType<NetworkRunner>();
        if (_runnerInstance == null)
        {
            _runnerInstance = Instantiate(_networkRunnerPrefab);
        }
        _runnerInstance.ProvideInput = true;

        var startGameargs = new StartGameArgs()
        {
            GameMode = mode,
            SessionName = roomName,
        };

        await _runnerInstance.StartGame(startGameargs);

        _runnerInstance.SetActiveScene(sceneName);
    }

    // 아이디와 패스워드 저장 함수
    public void SaveUserData()
    {
        // 만일 입력 검사에 문제가 있으면 함수를 종료
        if (!CheckInput(id.text, password.text))
            return;

        // 만일 시스템에 저장돼 있는 아이디가 존재하지 않는다면
        if (!PlayerPrefs.HasKey(id.text))
        {
            // 사용자의 아이디는 키(key)로 패스워드를 값(value)으로 설정해 저장
            PlayerPrefs.SetString(id.text, password.text);
            notify.text = "아이디 생성이 완료됐습니다.";
        }
        // 그렇지 않으면, 이미 존재한다는 메시지를 출력
        else
        {
            notify.text = "이미 존재하는 아이디입니다.";
        }
    }

    // 로그인 함수
    public void CheckUserData()
    {
        // 만일 입력 검사에 문제가 있으면 함수를 종료
        if (!CheckInput(id.text, password.text))
            return;

        // 사용자가 입력한 아이디를 키로 사용해 시스템에 저장된 값을 불러옴
        string pass = PlayerPrefs.GetString(id.text);

        // 만일, 사용자가 입력한 패스워드와 시스템에서 불러온 값을 비교해서 동일하다면
        if (password.text == pass)
        {
            // 다음 씬(1번 씬)을 로드
            // SceneManager.LoadScene(1);
            StartSharedSession();
        }
        // 그렇지 않고 두 데이터의 값이 다르면, 유저 정보 불일치 메시지를 남김
        else
        {
            notify.text = "입력하신 아이디와 패스워드가 일치하지 않습니다.";
        }
    }

    // 입력 완료 확인 함수
    bool CheckInput(string id, string pwd)
    {
        // 만일, 입력란이 하나라도 비어 있으면 유저 정보 입력을 요구
        if (id == "" || pwd == "")
        {
            notify.text = "아이디 또는 패스워드를 입력해주세요.";
            return false;
        }
        // 입력이 비어 있지 않으면 true를 반환
        else
        {
            return true;
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////

LoginManager 오브젝트 참조연결

Network Runner Prefab 과 Player Data Prefab 에 각각 프리팹 참조
RoomName 에 Input_RoomName 의 InputField_RoomName
Game Scene Name 에 MainScene

////////////////////////////////////////////////////////////////////////////////////////

서버(Server)   : 포톤의 서버를 이용

호스트(Host)   : 플레이어 중 하나를 서버로 둠

쉐어드(Shared) : 포톤서버이긴 하나 최소한의 정보만 가지고 플레이어가 움직이면
                움직인 플레이어가 다른 플레이어에게 위치값을 넘김
				(플레이어가 나갈시 나갔다는 정보만 전송하면 됨)
				
